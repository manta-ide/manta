import { z } from 'zod';
import { GraphSchema, GraphNodeSchema } from './schemas';
import { xmlToGraph, graphToXml } from '@/lib/graph-xml';
import fs from 'fs';
import path from 'path';

export type Graph = z.infer<typeof GraphSchema>;

// In-memory cache of the current graph for this process
let currentGraph: Graph | null = null;

// Local mode toggle and helpers
const LOCAL_MODE = process.env.MANTA_LOCAL_MODE === '1' || process.env.NEXT_PUBLIC_LOCAL_MODE === '1';
function getProjectDir(): string {
  const envDir = process.env.MANTA_PROJECT_DIR;
  if (envDir && fs.existsSync(envDir)) return envDir;
  // Fallback: try current working directory if it contains _graph
  try {
    const cwd = process.cwd();
    if (fs.existsSync(path.join(cwd, '_graph'))) return cwd;
    return cwd;
  } catch {
    return process.cwd();
  }
}
function getGraphDir(): string { return path.join(getProjectDir(), '_graph'); }
function getGraphPath(): string { return path.join(getGraphDir(), 'graph.xml'); }
function getLegacyGraphJsonPath(): string { return path.join(getGraphDir(), 'graph.json'); }
function ensureGraphDir() { try { fs.mkdirSync(getGraphDir(), { recursive: true }); } catch {} }
function readGraphFromFs(): Graph | null {
  try {
    const pXml = getGraphPath();
    const pJson = getLegacyGraphJsonPath();
    if (fs.existsSync(pXml)) {
      const raw = fs.readFileSync(pXml, 'utf8');
      const graph = xmlToGraph(raw);
      const parsed = GraphSchema.safeParse(graph);
      return parsed.success ? parsed.data : (graph as Graph);
    }
    if (fs.existsSync(pJson)) {
      const raw = fs.readFileSync(pJson, 'utf8');
      let data: any;
      try { data = JSON.parse(raw); } catch { data = null; }
      if (data) {
        const parsed = GraphSchema.safeParse(data);
        const graph = parsed.success ? parsed.data : (data as Graph);
        try { writeGraphToFs(graph); } catch {}
        return graph;
      }
    }
    return null;
  } catch {
    return null;
  }
}
function writeGraphToFs(graph: Graph) {
  ensureGraphDir();
  const xml = graphToXml(graph);
  fs.writeFileSync(getGraphPath(), xml, 'utf8');
}
// No-op broadcast function retained for compatibility
async function broadcastGraphReload(_userId: string): Promise<void> { return; }

function normalizeGraph(original: Graph): Graph {
  const seenNodeIds = new Set<string>();
  const normalizedNodes = [] as any[];
  const globalPropOwner: Record<string, string> = {};

  for (const node of original.nodes || []) {
    if (!node?.id) continue;
    if (seenNodeIds.has(node.id)) continue;
    seenNodeIds.add(node.id);

    const seenPropIds = new Set<string>();
    let properties = Array.isArray(node.properties) ? [...node.properties] : [];
    const nextProps: any[] = [];
    for (const p of properties) {
      if (!p || !p.id) continue;
      if (seenPropIds.has(p.id)) continue;
      let newId = String(p.id);
      const owner = globalPropOwner[newId];
      if (owner && owner !== node.id) {
        const prefixed = `${node.id}-${newId}`;
        // console.warn(`Duplicate property id "${newId}" detected in multiple nodes; renaming to "${prefixed}" on node ${node.id}`);
        newId = prefixed;
      }
      seenPropIds.add(newId);
      globalPropOwner[newId] = node.id;
      nextProps.push({ ...p, id: newId });
    }

    normalizedNodes.push({ ...node, properties: nextProps });
  }

  const computedEdges: any[] = [];
  const existingNodeIds = new Set(normalizedNodes.map(n => n.id));
  for (const parent of normalizedNodes) {
    const children = Array.isArray(parent.children) ? parent.children : [];
    for (const child of children) {
      if (!child?.id) continue;
      if (!existingNodeIds.has(child.id)) continue;
      computedEdges.push({ id: `${parent.id}-${child.id}`, source: parent.id, target: child.id });
    }
  }

  const edges: any[] = ([...(original as any).edges || [], ...computedEdges]);
  const byPair = new Set<string>();
  const nextEdges: any[] = [];
  for (const e of edges) {
    const source = e?.source || e?.source_id;
    const target = e?.target || e?.target_id;
    if (!source || !target) continue;
    const pair = `${source}â†’${target}`;
    if (byPair.has(pair)) continue;
    byPair.add(pair);
    const id = `${source}-${target}`;
    nextEdges.push({ id, source, target });
  }

  const normalized: any = { nodes: normalizedNodes };
  if (nextEdges.length > 0) normalized.edges = nextEdges;
  return normalized as Graph;
}

// Persist graph to local filesystem
async function saveGraphToFs(graph: Graph): Promise<void> {
  const normalized = normalizeGraph(graph);
  writeGraphToFs(normalized);
}

// --- Public API (in-memory + persistence) ---
export function getGraphSession(): Graph | null { return currentGraph; }

export async function storeGraph(graph: Graph, userId: string): Promise<void> {
  const normalized = normalizeGraph(graph);
  currentGraph = normalized;
  await saveGraphToFs(normalized);
  await broadcastGraphReload(userId);
}

export async function updateProperty(nodeId: string, propertyId: string, value: any, userId: string): Promise<void> {
  if (!currentGraph) return;

  const idx = currentGraph.nodes.findIndex(n => n.id === nodeId);
  if (idx === -1) return;

  const node = currentGraph.nodes[idx] as any;
  if (!Array.isArray(node.properties)) return;

  // Handle dot notation for nested properties (e.g., "root-styles.background-color")
  const dotIndex = propertyId.indexOf('.');
  if (dotIndex > 0) {
    const parentId = propertyId.substring(0, dotIndex);
    const fieldName = propertyId.substring(dotIndex + 1);

    // Find the parent object property
    const parentIdx = node.properties.findIndex((p: any) => p.id === parentId);
    if (parentIdx === -1) return;

    const parentProp = node.properties[parentIdx];
    if (parentProp.type !== 'object' || !Array.isArray(parentProp.fields)) return;

    // Find the nested field to update
    const fieldIdx = parentProp.fields.findIndex((f: any) => f.name === fieldName);
    if (fieldIdx === -1) return;

    // Update the nested field value
    parentProp.fields[fieldIdx] = { ...parentProp.fields[fieldIdx], value };

    // Update the parent property with the modified fields
    node.properties[parentIdx] = { ...parentProp, fields: parentProp.fields };
  } else {
    // Regular property update
    const pIdx = node.properties.findIndex((p: any) => p.id === propertyId);
    if (pIdx !== -1) {
      node.properties[pIdx] = { ...node.properties[pIdx], value };
    }
  }

  // Write the updated graph
  writeGraphToFs(currentGraph);
}

export async function loadGraphFromFile(_userId: string): Promise<Graph | null> {
  const graph = readGraphFromFs();
  currentGraph = graph;
  return graph;
}

export async function clearGraphSession(): Promise<void> { currentGraph = null; }

export function getGraphStats(): { hasGraph: boolean } { return { hasGraph: currentGraph !== null }; }

export function getGraphNode(nodeId: string): z.infer<typeof GraphNodeSchema> | null {
  if (!currentGraph) return null;
  return currentGraph.nodes.find(node => node.id === nodeId) || null;
}

export function getUnbuiltNodeIds(): string[] {
  if (!currentGraph) return [];
  return currentGraph.nodes.filter(n => (n.state || 'unbuilt') !== 'built').map(n => n.id);
}

export async function markNodesBuilt(nodeIds: string[], _userId: string): Promise<void> {
  if (!currentGraph) return;
  const idSet = new Set(nodeIds);
  currentGraph = { ...currentGraph, nodes: currentGraph.nodes.map(n => (idSet.has(n.id) ? { ...n, state: 'built' } : n)) };
  writeGraphToFs(currentGraph);
}

export async function markNodesUnbuilt(nodeIds: string[], _userId: string): Promise<void> {
  if (!currentGraph) return;
  const idSet = new Set(nodeIds);
  currentGraph = { ...currentGraph, nodes: currentGraph.nodes.map(n => (idSet.has(n.id) ? { ...n, state: 'unbuilt' } : n)) };
  writeGraphToFs(currentGraph);
}

export async function initializeGraphsFromFiles(): Promise<void> {
  // Nothing to do; graph is read lazily from _graph/graph.json
  return;
}
