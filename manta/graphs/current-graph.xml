<?xml version="1.0" encoding="UTF-8"?>
<graph xmlns="urn:app:graph" version="1.0" directed="true">
  <nodes>
    <node id="system-manta-ide" title="Manta IDE" x="0" y="0" z="0" type="system">
      <description>A graph-based development environment that enables developers to code by creating natural-language nodes. Provides node-based creation, properties editing, AI-powered building, and project indexing capabilities.</description>
      <props>
        <prop name="technology" title="Technology Stack" type="text">Next.js 15, TypeScript, React 19, Node.js 20+</prop>
        <prop name="deployment" title="Deployment" type="text">Local development server on port 3000</prop>
        <prop name="users" title="Target Users" type="text">Software developers using Claude Code by Anthropic</prop>
      </props>
    </node>

    <node id="container-web-app" title="Web Application" x="-400" y="200" z="0" type="container">
      <description>Next.js web application providing the graph-based IDE interface. Handles UI rendering, user interactions, graph visualization, and real-time updates via SSE.</description>
      <metadata>
        <files>
          <file>src/app/page.tsx</file>
          <file>src/app/layout.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="container-web-app-technology" title="Technology" type="text">Next.js 15 with App Router, React 19, TypeScript</prop>
        <prop name="port" title="Port" type="number">3000</prop>
      </props>
    </node>

    <node id="container-api-server" title="API Server" x="0" y="200" z="0" type="container">
      <description>Next.js API routes providing backend services for graph operations, file management, agent requests, and layer management.</description>
      <metadata>
        <files>
          <file>src/app/api/graph-api/route.ts</file>
          <file>src/app/api/files/route.ts</file>
          <file>src/app/api/agent-request/route.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="container-api-server-technology" title="Technology" type="text">Next.js API Routes, Server-Side TypeScript</prop>
        <prop name="endpoints" title="Key Endpoints" type="text">/api/graph-api, /api/files, /api/agent-request, /api/layers</prop>
      </props>
    </node>

    <node id="container-file-storage" title="File Storage" x="400" y="200" z="0" type="container">
      <description>Local filesystem storage for graph XML files, project files, and layer definitions. Stores current-graph.xml, base-graph.xml, and user layer configurations.</description>
      <metadata>
        <files>
          <file>src/lib/graph-xml.ts</file>
          <file>src/lib/layers-server.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="container-file-storage-technology" title="Technology" type="text">Node.js fs module, XML file format</prop>
        <prop name="location" title="Storage Location" type="text">manta/ directory in project root</prop>
      </props>
    </node>

    <node id="container-claude-agent" title="Claude Agent System" x="200" y="400" z="0" type="container">
      <description>Integration with Claude Code by Anthropic for AI-powered code generation, graph building, and indexing operations. Provides specialized agents for different tasks.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/claude-code-tools.ts</file>
          <file>src/app/api/lib/agentPrompts.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="container-claude-agent-technology" title="Technology" type="text">Claude Agent SDK, MCP Protocol</prop>
        <prop name="agents" title="Agent Types" type="text">Builder Agent, Indexing Agent</prop>
      </props>
    </node>

    <node id="component-graph-view" title="Graph View Component" x="-600" y="400" z="0" type="component">
      <description>React component providing interactive 3D graph visualization using XYFlow. Handles node rendering, edge drawing, interactions, selections, and viewport management.</description>
      <metadata>
        <files>
          <file>src/components/GraphView.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="library" title="Library" type="text">@xyflow/react</prop>
        <prop name="features" title="Features" type="text">Node drag &amp; drop, edge connections, minimap, helper lines</prop>
      </props>
    </node>

    <node id="component-node-sidebar" title="Node Sidebar Component" x="-450" y="400" z="0" type="component">
      <description>Sidebar component for viewing and editing selected node properties. Displays node metadata, properties with type-specific editors, and allows property value updates.</description>
      <metadata>
        <files>
          <file>src/components/SelectedNodeSidebar.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="component-node-sidebar-features" title="Features" type="text">Property editing, metadata display, real-time updates</prop>
      </props>
    </node>

    <node id="component-floating-chat" title="Floating Chat Component" x="-300" y="400" z="0" type="component">
      <description>Chat interface for interacting with Claude AI agent. Allows users to send natural language commands for node creation, editing, and building.</description>
      <metadata>
        <files>
          <file>src/components/FloatingChat.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="component-floating-chat-features" title="Features" type="text">Message history, streaming responses, command parsing</prop>
      </props>
    </node>

    <node id="component-layers-sidebar" title="Layers Sidebar Component" x="-150" y="400" z="0" type="component">
      <description>Sidebar for managing graph layers (views). Allows creating, switching, cloning, renaming, and deleting layers. Supports both C4 architectural layers and custom user layers.</description>
      <metadata>
        <files>
          <file>src/components/LayersSidebar.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="layer-types" title="Layer Types" type="text">C4 layers (system/container/component/code), Custom user layers</prop>
      </props>
    </node>

    <node id="component-search-overlay" title="Search Overlay Component" x="-600" y="550" z="0" type="component">
      <description>Global search interface for finding nodes by title, prompt, or property values. Provides case-sensitive search and result navigation.</description>
      <metadata>
        <files>
          <file>src/components/SearchOverlay.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="component-search-overlay-features" title="Features" type="text">Full-text search, case sensitivity, property filtering</prop>
      </props>
    </node>

    <node id="component-property-editors" title="Property Editors Component" x="-450" y="550" z="0" type="component">
      <description>Collection of type-specific property editors (text, number, boolean, color, select, etc.) for editing node properties based on their defined types.</description>
      <metadata>
        <files>
          <file>src/components/property-editors/index.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="editor-types" title="Editor Types" type="text">text, number, boolean, color, select, slider, object, object-list</prop>
      </props>
    </node>

    <node id="component-graph-service" title="Graph Service Component" x="-100" y="400" z="0" type="component">
      <description>Core service managing graph state, persistence, and synchronization. Handles current/base graph storage, XML conversion, SSE broadcasting, and layer management.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/graph-service.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="responsibilities" title="Responsibilities" type="text">Graph CRUD, XML serialization, SSE broadcasts, layer switching</prop>
      </props>
    </node>

    <node id="component-graph-api" title="Graph API Route" x="50" y="400" z="0" type="component">
      <description>REST API endpoint for graph operations. Provides GET (read), PUT (update), POST (mutations), PATCH (property updates), and SSE streaming for real-time updates.</description>
      <metadata>
        <files>
          <file>src/app/api/graph-api/route.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="methods" title="HTTP Methods" type="text">GET, POST, PUT, PATCH</prop>
        <prop name="component-graph-api-features" title="Features" type="text">SSE streaming, XML/JSON formats, node/edge CRUD</prop>
      </props>
    </node>

    <node id="component-files-api" title="Files API Route" x="200" y="400" z="0" type="component">
      <description>REST API endpoint for file operations. Handles reading project files, file tree generation, and file content updates.</description>
      <metadata>
        <files>
          <file>src/app/api/files/route.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="operations" title="Operations" type="text">Read files, list directory tree, update file content</prop>
      </props>
    </node>

    <node id="component-agent-api" title="Agent Request API Route" x="350" y="400" z="0" type="component">
      <description>REST API endpoint for Claude agent requests. Processes user commands, invokes appropriate agents (builder/indexer), and streams responses.</description>
      <metadata>
        <files>
          <file>src/app/api/agent-request/route.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="component-agent-api-features" title="Features" type="text">Command routing, agent invocation, streaming responses</prop>
      </props>
    </node>

    <node id="component-layers-api" title="Layers API Route" x="500" y="400" z="0" type="component">
      <description>REST API endpoint for layer management. Supports creating, cloning, renaming, deleting layers, and switching active layer.</description>
      <metadata>
        <files>
          <file>src/app/api/layers/route.ts</file>
          <file>src/app/api/layers/[layerName]/route.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="component-layers-api-operations" title="Operations" type="text">Create, clone, rename, delete, switch layers</prop>
      </props>
    </node>

    <node id="component-claude-tools" title="Claude Tools Component" x="100" y="550" z="0" type="component">
      <description>MCP tools for Claude agents to interact with graphs. Provides read, node_create, node_edit, node_delete, edge_create, edge_delete, and graph manipulation tools.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/claude-code-tools.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="protocol" title="Protocol" type="text">Model Context Protocol (MCP)</prop>
        <prop name="tools" title="Available Tools" type="text">read, node_create, node_edit, node_delete, edge_create, edge_delete, sync_to_base_graph</prop>
      </props>
    </node>

    <node id="component-graph-xml" title="Graph XML Serialization" x="300" y="550" z="0" type="component">
      <description>Component handling XML serialization and deserialization of graph data. Converts between in-memory graph objects and XML file format.</description>
      <metadata>
        <files>
          <file>src/lib/graph-xml.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="format" title="Format" type="text">XML with nodes and edges tags</prop>
        <prop name="component-graph-xml-operations" title="Operations" type="text">xmlToGraph, graphToXml</prop>
      </props>
    </node>

    <node id="component-layers-server" title="Layers Server Component" x="450" y="550" z="0" type="component">
      <description>Server-side layer management. Handles layer file operations, active layer persistence, and layer definition storage in filesystem.</description>
      <metadata>
        <files>
          <file>src/lib/layers-server.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="storage" title="Storage Location" type="text">manta/layers/ directory</prop>
        <prop name="component-layers-server-operations" title="Operations" type="text">Create, read, update, delete layer files</prop>
      </props>
    </node>

    <node id="component-graph-diff" title="Graph Diff Component" x="600" y="550" z="0" type="component">
      <description>Component analyzing differences between current and base graphs. Identifies added, modified, and deleted nodes/edges for build operations.</description>
      <metadata>
        <files>
          <file>src/lib/graph-diff.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="component-graph-diff-features" title="Features" type="text">Node comparison, edge comparison, state marking</prop>
      </props>
    </node>

    <node id="component-agent-prompts" title="Agent Prompts Component" x="100" y="700" z="0" type="component">
      <description>Defines system prompts and instructions for different Claude agents (builder, indexer). Configures agent behavior and capabilities.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/agentPrompts.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="component-agent-prompts-agents" title="Agent Types" type="text">Builder Agent, Indexing Agent</prop>
      </props>
    </node>

    <node id="component-claude-utils" title="Claude Code Utils" x="250" y="700" z="0" type="component">
      <description>Utility functions for Claude Code integration. Handles agent execution, command routing, and response processing.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/claude-code-utils.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="component-claude-utils-features" title="Features" type="text">Agent invocation, command parsing, streaming</prop>
      </props>
    </node>

    <node id="component-store" title="Project Store Component" x="-300" y="550" z="0" type="component">
      <description>Zustand-based state management for the entire application. Manages graph state, file system state, layers, selections, search, and SSE connections.</description>
      <metadata>
        <files>
          <file>src/lib/store.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="component-store-library" title="Library" type="text">Zustand</prop>
        <prop name="state" title="State Managed" type="text">graph, files, layers, selections, search, SSE</prop>
      </props>
    </node>

    <node id="code-use-project-store" title="useProjectStore Hook" x="-350" y="700" z="0" type="code">
      <description>Zustand store hook providing global state management. Exposes graph operations, file operations, layer management, search functionality, and SSE connection handling.</description>
      <metadata>
        <files>
          <file>src/lib/store.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="type" title="Code Type" type="text">React Hook</prop>
        <prop name="exports" title="Exports" type="text">useProjectStore</prop>
      </props>
    </node>

    <node id="code-graph-schema" title="Graph Schema Definitions" x="-100" y="550" z="0" type="code">
      <description>Zod schema definitions for graph data structures including GraphNode, GraphEdge, Property, and Graph types. Provides runtime type validation.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/schemas.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-graph-schema-type" title="Code Type" type="text">Schema Definitions</prop>
        <prop name="code-graph-schema-library" title="Library" type="text">Zod</prop>
      </props>
    </node>

    <node id="code-xml-to-graph" title="xmlToGraph Function" x="250" y="700" z="0" type="code">
      <description>Function converting XML string representation to in-memory graph object. Parses nodes, edges, properties, and metadata from XML format.</description>
      <metadata>
        <files>
          <file>src/lib/graph-xml.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-xml-to-graph-type" title="Code Type" type="text">Function</prop>
        <prop name="signature" title="Signature" type="text">(xml: string) =&gt; Graph</prop>
      </props>
    </node>

    <node id="code-graph-to-xml" title="graphToXml Function" x="350" y="700" z="0" type="code">
      <description>Function converting in-memory graph object to XML string representation. Serializes nodes, edges, properties, and metadata to XML format.</description>
      <metadata>
        <files>
          <file>src/lib/graph-xml.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-graph-to-xml-type" title="Code Type" type="text">Function</prop>
        <prop name="code-graph-to-xml-signature" title="Signature" type="text">(graph: Graph) =&gt; string</prop>
      </props>
    </node>

    <node id="code-store-graph-function" title="storeGraph Function" x="-50" y="700" z="0" type="code">
      <description>Core function for persisting graph to filesystem and triggering SSE broadcasts. Normalizes graph, writes to XML, and notifies connected clients.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/graph-service.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-store-graph-function-type" title="Code Type" type="text">Async Function</prop>
        <prop name="code-store-graph-function-signature" title="Signature" type="text">(graph: Graph, userId: string) =&gt; Promise&lt;void&gt;</prop>
      </props>
    </node>

    <node id="code-broadcast-graph-update" title="broadcastGraphUpdate Function" x="50" y="700" z="0" type="code">
      <description>Function broadcasting graph updates to all connected SSE clients. Encodes graph as base64 XML and sends to active stream controllers with debouncing.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/graph-service.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-broadcast-graph-update-type" title="Code Type" type="text">Function</prop>
        <prop name="code-broadcast-graph-update-features" title="Features" type="text">Base64 encoding, debouncing, error handling</prop>
      </props>
    </node>

    <node id="code-create-graph-tools" title="createGraphTools Function" x="150" y="850" z="0" type="code">
      <description>Factory function creating MCP tool definitions for Claude agents. Defines tools for reading, creating, editing, and deleting nodes and edges in graphs.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/claude-code-tools.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-create-graph-tools-type" title="Code Type" type="text">Factory Function</prop>
        <prop name="code-create-graph-tools-tools" title="Tools Created" type="text">read, node_create, node_edit, node_delete, edge_create, edge_delete</prop>
      </props>
    </node>

    <node id="code-analyze-graph-diff" title="analyzeGraphDiff Function" x="650" y="700" z="0" type="code">
      <description>Function comparing two graph versions to identify changes. Returns lists of added, modified, and deleted nodes/edges for build operations.</description>
      <metadata>
        <files>
          <file>src/lib/graph-diff.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-analyze-graph-diff-type" title="Code Type" type="text">Function</prop>
        <prop name="returns" title="Returns" type="text">{ addedNodes, modifiedNodes, deletedNodes, addedEdges, deletedEdges }</prop>
      </props>
    </node>

    <node id="code-apply-layer-to-graph" title="applyLayerToGraph Function" x="500" y="700" z="0" type="code">
      <description>Function filtering graph based on active layer definition. Applies C4 level filtering or custom layer node selection and positioning.</description>
      <metadata>
        <files>
          <file>src/lib/layers.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-apply-layer-to-graph-type" title="Code Type" type="text">Function</prop>
        <prop name="code-apply-layer-to-graph-signature" title="Signature" type="text">(graph: Graph, layer: string | LayerDefinition) =&gt; Graph</prop>
      </props>
    </node>

    <node id="code-reactflow-instance" title="ReactFlow Component Instance" x="-650" y="550" z="0" type="code">
      <description>Main ReactFlow component instance managing graph visualization. Handles nodes, edges, viewport, interactions, and custom node types.</description>
      <metadata>
        <files>
          <file>src/components/GraphView.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="code-reactflow-instance-type" title="Code Type" type="text">React Component Instance</prop>
        <prop name="code-reactflow-instance-library" title="Library" type="text">@xyflow/react</prop>
      </props>
    </node>

    <node id="code-node-types" title="Custom Node Types" x="-750" y="550" z="0" type="code">
      <description>Collection of custom ReactFlow node components with different shapes (rectangle, circle, diamond, cylinder, hexagon, etc.) for visual representation in the graph.</description>
      <metadata>
        <files>
          <file>src/components/shapes/types/index.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-node-types-type" title="Code Type" type="text">React Components</prop>
        <prop name="shapes" title="Available Shapes" type="text">rectangle, circle, diamond, cylinder, hexagon, parallelogram</prop>
      </props>
    </node>

    <node id="code-property-editor-components" title="Property Editor Components" x="-500" y="700" z="0" type="code">
      <description>Individual React components for editing different property types: TextPropertyEditor, NumberPropertyEditor, BooleanPropertyEditor, ColorPropertyEditor, SelectPropertyEditor, etc.</description>
      <metadata>
        <files>
          <file>src/components/property-editors/TextAreaPropertyEditor.tsx</file>
          <file>src/components/property-editors/NumberPropertyEditor.tsx</file>
          <file>src/components/property-editors/ColorPropertyEditor.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="code-property-editor-components-type" title="Code Type" type="text">React Components Collection</prop>
        <prop name="editors" title="Editor Types" type="text">Text, Number, Boolean, Color, Select, Slider, Object, ObjectList</prop>
      </props>
    </node>

    <node id="code-sse-stream-controller" title="SSE Stream Controller" x="150" y="700" z="0" type="code">
      <description>Server-side streaming controller managing active EventSource connections. Handles registration, message broadcasting, and connection cleanup for real-time updates.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/graph-service.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-sse-stream-controller-type" title="Code Type" type="text">Stream Management</prop>
        <prop name="functions" title="Key Functions" type="text">registerStreamController, unregisterStreamController</prop>
      </props>
    </node>

    <node id="code-normalize-graph" title="normalizeGraph Function" x="-150" y="850" z="0" type="code">
      <description>Function ensuring graph data consistency by deduplicating nodes/edges, renaming conflicting property IDs, and computing derived edges from parent-child relationships.</description>
      <metadata>
        <files>
          <file>src/app/api/lib/graph-service.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-normalize-graph-type" title="Code Type" type="text">Function</prop>
        <prop name="code-normalize-graph-signature" title="Signature" type="text">(graph: Graph) =&gt; Graph</prop>
      </props>
    </node>

    <node id="code-reconcile-graph" title="reconcileGraph Function" x="-250" y="850" z="0" type="code">
      <description>Function merging incoming graph updates with current graph state. Preserves local node positions while adopting remote changes for smooth real-time collaboration.</description>
      <metadata>
        <files>
          <file>src/lib/store.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-reconcile-graph-type" title="Code Type" type="text">Function</prop>
        <prop name="code-reconcile-graph-signature" title="Signature" type="text">(current: Graph, incoming: Graph) =&gt; Graph</prop>
      </props>
    </node>

    <node id="code-helper-lines" title="Helper Lines System" x="-750" y="700" z="0" type="code">
      <description>Visual alignment guides shown during node dragging. Detects alignment with other nodes and displays temporary helper lines for precise positioning.</description>
      <metadata>
        <files>
          <file>src/components/helper-lines/useHelperLines.tsx</file>
          <file>src/components/helper-lines/HelperLinesRenderer.tsx</file>
        </files>
      </metadata>
      <props>
        <prop name="code-helper-lines-type" title="Code Type" type="text">React Hook + Component</prop>
        <prop name="code-helper-lines-features" title="Features" type="text">Horizontal/vertical alignment detection, visual guides</prop>
      </props>
    </node>

    <node id="code-chat-service" title="Chat Service" x="-250" y="700" z="0" type="code">
      <description>Service managing chat interactions with Claude agent. Handles message sending, response streaming, and command execution for natural language graph operations.</description>
      <metadata>
        <files>
          <file>src/lib/chatService.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-chat-service-type" title="Code Type" type="text">Service Module</prop>
        <prop name="code-chat-service-features" title="Features" type="text">Message streaming, command parsing, error handling</prop>
      </props>
    </node>

    <node id="code-layer-definition" title="LayerDefinition Type" x="550" y="850" z="0" type="code">
      <description>TypeScript interface defining custom layer structure. Includes node selection criteria, positioning overrides, and filtering rules for creating graph views.</description>
      <metadata>
        <files>
          <file>src/lib/layers.ts</file>
        </files>
      </metadata>
      <props>
        <prop name="code-layer-definition-type" title="Code Type" type="text">TypeScript Interface</prop>
        <prop name="properties" title="Properties" type="text">nodes, positions, filters</prop>
      </props>
    </node>
  </nodes>

  <edges>
    <edge id="container-web-app-system-manta-ide" source="container-web-app" target="system-manta-ide" role="links-to"/>
    <edge id="container-api-server-system-manta-ide" source="container-api-server" target="system-manta-ide" role="links-to"/>
    <edge id="container-file-storage-system-manta-ide" source="container-file-storage" target="system-manta-ide" role="links-to"/>
    <edge id="container-claude-agent-system-manta-ide" source="container-claude-agent" target="system-manta-ide" role="links-to"/>
    <edge id="component-graph-view-container-web-app" source="component-graph-view" target="container-web-app" role="links-to"/>
    <edge id="component-node-sidebar-container-web-app" source="component-node-sidebar" target="container-web-app" role="links-to"/>
    <edge id="component-floating-chat-container-web-app" source="component-floating-chat" target="container-web-app" role="links-to"/>
    <edge id="component-layers-sidebar-container-web-app" source="component-layers-sidebar" target="container-web-app" role="links-to"/>
    <edge id="component-search-overlay-container-web-app" source="component-search-overlay" target="container-web-app" role="links-to"/>
    <edge id="component-property-editors-container-web-app" source="component-property-editors" target="container-web-app" role="links-to"/>
    <edge id="component-store-container-web-app" source="component-store" target="container-web-app" role="links-to"/>
    <edge id="component-graph-service-container-api-server" source="component-graph-service" target="container-api-server" role="links-to"/>
    <edge id="component-graph-api-container-api-server" source="component-graph-api" target="container-api-server" role="links-to"/>
    <edge id="component-files-api-container-api-server" source="component-files-api" target="container-api-server" role="links-to"/>
    <edge id="component-agent-api-container-api-server" source="component-agent-api" target="container-api-server" role="links-to"/>
    <edge id="component-layers-api-container-api-server" source="component-layers-api" target="container-api-server" role="links-to"/>
    <edge id="component-graph-xml-container-file-storage" source="component-graph-xml" target="container-file-storage" role="links-to"/>
    <edge id="component-layers-server-container-file-storage" source="component-layers-server" target="container-file-storage" role="links-to"/>
    <edge id="component-graph-diff-container-file-storage" source="component-graph-diff" target="container-file-storage" role="links-to"/>
    <edge id="component-claude-tools-container-claude-agent" source="component-claude-tools" target="container-claude-agent" role="links-to"/>
    <edge id="component-agent-prompts-container-claude-agent" source="component-agent-prompts" target="container-claude-agent" role="links-to"/>
    <edge id="component-claude-utils-container-claude-agent" source="component-claude-utils" target="container-claude-agent" role="links-to"/>
    <edge id="component-graph-view-component-store" source="component-graph-view" target="component-store" role="uses state from"/>
    <edge id="component-node-sidebar-component-property-editors" source="component-node-sidebar" target="component-property-editors" role="uses"/>
    <edge id="component-floating-chat-component-store" source="component-floating-chat" target="component-store" role="dispatches actions to"/>
    <edge id="component-graph-api-component-graph-service" source="component-graph-api" target="component-graph-service" role="delegates to"/>
    <edge id="component-agent-api-component-claude-utils" source="component-agent-api" target="component-claude-utils" role="uses"/>
    <edge id="component-graph-service-component-graph-xml" source="component-graph-service" target="component-graph-xml" role="serializes via"/>
    <edge id="component-layers-api-component-layers-server" source="component-layers-api" target="component-layers-server" role="uses"/>
    <edge id="component-claude-utils-component-claude-tools" source="component-claude-utils" target="component-claude-tools" role="provides tools to"/>
    <edge id="code-use-project-store-component-store" source="code-use-project-store" target="component-store" role="links-to"/>
    <edge id="code-graph-schema-component-graph-service" source="code-graph-schema" target="component-graph-service" role="links-to"/>
    <edge id="code-xml-to-graph-component-graph-xml" source="code-xml-to-graph" target="component-graph-xml" role="links-to"/>
    <edge id="code-graph-to-xml-component-graph-xml" source="code-graph-to-xml" target="component-graph-xml" role="links-to"/>
    <edge id="code-store-graph-function-component-graph-service" source="code-store-graph-function" target="component-graph-service" role="links-to"/>
    <edge id="code-broadcast-graph-update-component-graph-service" source="code-broadcast-graph-update" target="component-graph-service" role="links-to"/>
    <edge id="code-create-graph-tools-component-claude-tools" source="code-create-graph-tools" target="component-claude-tools" role="links-to"/>
    <edge id="code-analyze-graph-diff-component-graph-diff" source="code-analyze-graph-diff" target="component-graph-diff" role="links-to"/>
    <edge id="code-apply-layer-to-graph-component-layers-server" source="code-apply-layer-to-graph" target="component-layers-server" role="links-to"/>
    <edge id="code-reactflow-instance-component-graph-view" source="code-reactflow-instance" target="component-graph-view" role="links-to"/>
    <edge id="code-store-graph-function-code-graph-to-xml" source="code-store-graph-function" target="code-graph-to-xml" role="uses"/>
    <edge id="code-store-graph-function-code-broadcast-graph-update" source="code-store-graph-function" target="code-broadcast-graph-update" role="calls"/>
    <edge id="code-broadcast-graph-update-code-graph-to-xml" source="code-broadcast-graph-update" target="code-graph-to-xml" role="uses"/>
    <edge id="code-use-project-store-code-xml-to-graph" source="code-use-project-store" target="code-xml-to-graph" role="uses for deserialization"/>
    <edge id="code-use-project-store-code-apply-layer-to-graph" source="code-use-project-store" target="code-apply-layer-to-graph" role="filters graph via"/>
    <edge id="code-reactflow-instance-code-use-project-store" source="code-reactflow-instance" target="code-use-project-store" role="subscribes to"/>
    <edge id="code-node-types-component-graph-view" source="code-node-types" target="component-graph-view" role="links-to"/>
    <edge id="code-property-editor-components-component-property-editors" source="code-property-editor-components" target="component-property-editors" role="links-to"/>
    <edge id="code-sse-stream-controller-component-graph-service" source="code-sse-stream-controller" target="component-graph-service" role="links-to"/>
    <edge id="code-normalize-graph-component-graph-service" source="code-normalize-graph" target="component-graph-service" role="links-to"/>
    <edge id="code-reconcile-graph-component-store" source="code-reconcile-graph" target="component-store" role="links-to"/>
    <edge id="code-helper-lines-component-graph-view" source="code-helper-lines" target="component-graph-view" role="links-to"/>
    <edge id="code-chat-service-component-floating-chat" source="code-chat-service" target="component-floating-chat" role="links-to"/>
    <edge id="code-layer-definition-component-layers-server" source="code-layer-definition" target="component-layers-server" role="links-to"/>
    <edge id="code-normalize-graph-code-store-graph-function" source="code-normalize-graph" target="code-store-graph-function" role="called by"/>
    <edge id="code-reconcile-graph-code-xml-to-graph" source="code-reconcile-graph" target="code-xml-to-graph" role="processes output from"/>
    <edge id="code-reactflow-instance-code-node-types" source="code-reactflow-instance" target="code-node-types" role="renders"/>
    <edge id="code-reactflow-instance-code-helper-lines" source="code-reactflow-instance" target="code-helper-lines" role="integrates with"/>
    <edge id="code-chat-service-code-use-project-store" source="code-chat-service" target="code-use-project-store" role="dispatches to"/>
    <edge id="code-apply-layer-to-graph-code-layer-definition" source="code-apply-layer-to-graph" target="code-layer-definition" role="processes"/>
    <edge id="code-sse-stream-controller-code-broadcast-graph-update" source="code-sse-stream-controller" target="code-broadcast-graph-update" role="manages streams for"/>
  </edges>
</graph>
