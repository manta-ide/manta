<?xml version="1.0" encoding="UTF-8"?>
<graph xmlns="urn:app:graph" version="1.0" directed="true">
  <nodes>
    <node id="app-initialization" title="Application Initialization" x="100" y="100" z="0">
      <description>Initialize the Next.js application with fonts, metadata, and core layout setup

asdasd</description>
      <metadata>
        <file>src/app/layout.tsx</file>
        <file>src/app/page.tsx</file>
      </metadata>
      <props>
        <prop name="state-description" title="State Description" type="text">Application boots up with Next.js runtime, loads fonts and basic layout</prop>
        <prop name="entry-conditions" title="Entry Conditions" type="text">User navigates to application URL, Next.js server starts</prop>
        <prop name="exit-conditions" title="Exit Conditions" type="text">Layout rendered, client-side hydration complete</prop>
        <prop name="error-paths" title="Error Paths" type="text">Font loading failure, hydration mismatch, server startup errors</prop>
        <prop name="next-states" title="Next Possible States" type="text">project-store-initialization, component-mount</prop>
      </props>
    </node>

    <node id="project-store-initialization" title="Project Store Initialization" x="400" y="100" z="0">
      <description>Initialize Zustand project store with default state for files, graphs, layers, and UI</description>
      <metadata>
        <file>src/lib/store.ts</file>
      </metadata>
      <props>
        <prop name="project-store-initialization-state-description" title="State Description" type="text">Zustand store initializes with empty maps, null values, loading states true</prop>
        <prop name="project-store-initialization-entry-conditions" title="Entry Conditions" type="text">React component mounts, store hook called</prop>
        <prop name="project-store-initialization-exit-conditions" title="Exit Conditions" type="text">Store state initialized, ready for data loading</prop>
        <prop name="project-store-initialization-error-paths" title="Error Paths" type="text">Store creation failure, memory allocation issues</prop>
        <prop name="project-store-initialization-next-states" title="Next Possible States" type="text">project-loading, layer-loading</prop>
      </props>
    </node>

    <node id="project-loading" title="Project Loading" x="700" y="100" z="0">
      <description>Load project data including file tree, graph layers, and current graph state</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/app/api/files/route.ts</file>
        <file>src/app/api/layers/route.ts</file>
      </metadata>
      <props>
        <prop name="project-loading-state-description" title="State Description" type="text">Parallel loading of layers, graphs, and file tree from filesystem/memory</prop>
        <prop name="project-loading-entry-conditions" title="Entry Conditions" type="text">Store initialized, loadProject() called</prop>
        <prop name="project-loading-exit-conditions" title="Exit Conditions" type="text">File tree loaded, graph loading initiated, layers loaded</prop>
        <prop name="project-loading-error-paths" title="Error Paths" type="text">API failures, filesystem access errors, parsing errors</prop>
        <prop name="project-loading-next-states" title="Next Possible States" type="text">graph-loading, template-initialization, project-ready</prop>
      </props>
    </node>

    <node id="graph-loading" title="Graph Loading" x="1000" y="100" z="0">
      <description>Load current and base graphs from filesystem, parse XML, and validate structure</description>
      <metadata>
        <file>src/app/api/lib/graph-service.ts</file>
        <file>src/lib/graph-xml.ts</file>
        <file>src/app/api/graph-api/route.ts</file>
      </metadata>
      <props>
        <prop name="graph-loading-state-description" title="State Description" type="text">Reads XML files from active layer paths, parses to graph objects, validates schema</prop>
        <prop name="graph-loading-entry-conditions" title="Entry Conditions" type="text">Project loading initiated, layer paths determined</prop>
        <prop name="graph-loading-exit-conditions" title="Exit Conditions" type="text">Current and base graphs loaded, diff states computed</prop>
        <prop name="graph-loading-error-paths" title="Error Paths" type="text">XML parsing errors, file not found, schema validation failures</prop>
        <prop name="graph-loading-next-states" title="Next Possible States" type="text">template-initialization, graph-validation, graph-diff-analysis</prop>
      </props>
    </node>

    <node id="template-initialization" title="Template Initialization" x="1000" y="386" z="0">
      <description>Auto-apply partial template when no graphs exist, ensuring basic project structure</description>
      <metadata>
        <file>src/app/api/templates/route.ts</file>
        <file>templates-config.json</file>
      </metadata>
      <props>
        <prop name="template-initialization-state-description" title="State Description" type="text">Detects missing graphs (404), applies partial template to bootstrap project</prop>
        <prop name="template-initialization-entry-conditions" title="Entry Conditions" type="text">Graph loading returns 404, no current-graph.xml found</prop>
        <prop name="template-initialization-exit-conditions" title="Exit Conditions" type="text">Partial template applied, basic graph structure created</prop>
        <prop name="template-initialization-error-paths" title="Error Paths" type="text">Template application failure, file creation errors, permission issues</prop>
        <prop name="template-initialization-next-states" title="Next Possible States" type="text">graph-loading, graph-validation</prop>
      </props>
    </node>

    <node id="graph-validation" title="Graph Validation" x="1452.6437348726263" y="98.00000000000003" z="0">
      <description>Validate graph structure, normalize nodes and edges, resolve property conflicts</description>
      <metadata>
        <file>src/app/api/lib/graph-service.ts</file>
        <file>src/app/api/lib/schemas.ts</file>
      </metadata>
      <props>
        <prop name="graph-validation-state-description" title="State Description" type="text">Normalizes graph data, deduplicates nodes/edges, validates against schema</prop>
        <prop name="graph-validation-entry-conditions" title="Entry Conditions" type="text">Raw graph loaded from XML or template applied</prop>
        <prop name="graph-validation-exit-conditions" title="Exit Conditions" type="text">Clean normalized graph with unique IDs and valid structure</prop>
        <prop name="graph-validation-error-paths" title="Error Paths" type="text">Schema validation failures, circular dependencies, invalid node IDs</prop>
        <prop name="graph-validation-next-states" title="Next Possible States" type="text">graph-diff-analysis, sse-connection, project-ready</prop>
      </props>
    </node>

    <node id="graph-diff-analysis" title="Graph Diff Analysis" x="1833.4551239228404" y="100" z="0">
      <description>Compare current graph with base graph to identify built/unbuilt nodes and changes</description>
      <metadata>
        <file>src/lib/graph-diff.ts</file>
        <file>src/lib/store.ts</file>
      </metadata>
      <props>
        <prop name="graph-diff-analysis-state-description" title="State Description" type="text">Analyzes differences between current and base graphs, marks node states</prop>
        <prop name="graph-diff-analysis-entry-conditions" title="Entry Conditions" type="text">Both current and base graphs loaded and validated</prop>
        <prop name="graph-diff-analysis-exit-conditions" title="Exit Conditions" type="text">Node states computed (built/unbuilt), diff metadata available</prop>
        <prop name="graph-diff-analysis-error-paths" title="Error Paths" type="text">Comparison algorithm errors, memory issues with large graphs</prop>
        <prop name="graph-diff-analysis-next-states" title="Next Possible States" type="text">sse-connection, project-ready, graph-display</prop>
      </props>
    </node>

    <node id="sse-connection" title="SSE Connection Establishment" x="2133.4551239228404" y="100" z="0">
      <description>Establish Server-Sent Events connection for real-time graph updates and collaboration</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/app/api/graph-api/route.ts</file>
      </metadata>
      <props>
        <prop name="sse-connection-state-description" title="State Description" type="text">Creates EventSource connection for real-time graph synchronization</prop>
        <prop name="sse-connection-entry-conditions" title="Entry Conditions" type="text">Graph loaded and validated, ready for real-time updates</prop>
        <prop name="sse-connection-exit-conditions" title="Exit Conditions" type="text">SSE connection established, receiving graph update events</prop>
        <prop name="sse-connection-error-paths" title="Error Paths" type="text">Connection refused, network errors, SSE not supported</prop>
        <prop name="sse-connection-next-states" title="Next Possible States" type="text">project-ready, sse-reconnection, sse-disconnected</prop>
      </props>
    </node>

    <node id="project-ready" title="Project Ready" x="2433.4551239228404" y="100" z="0">
      <description>Application fully loaded and ready for user interactions with graph editing capabilities</description>
      <metadata>
        <file>src/app/page.tsx</file>
        <file>src/components/GraphView.tsx</file>
      </metadata>
      <props>
        <prop name="project-ready-state-description" title="State Description" type="text">All systems operational: graph loaded, SSE connected, UI responsive</prop>
        <prop name="project-ready-entry-conditions" title="Entry Conditions" type="text">Graph validated, SSE connected, components mounted</prop>
        <prop name="project-ready-exit-conditions" title="Exit Conditions" type="text">User initiates actions: node selection, editing, building</prop>
        <prop name="project-ready-error-paths" title="Error Paths" type="text">Runtime errors, component crashes, store corruption</prop>
        <prop name="project-ready-next-states" title="Next Possible States" type="text">node-selection, graph-editing, build-initiation, layer-switching</prop>
      </props>
    </node>

    <node id="node-selection" title="Node Selection" x="3083.76541463759" y="147.38938579287665" z="0">
      <description>Handle user node selection events and update UI state accordingly</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/components/SelectedNodeSidebar.tsx</file>
      </metadata>
      <props>
        <prop name="node-selection-state-description" title="State Description" type="text">User clicks node, selection state updated, sidebar shows properties</prop>
        <prop name="node-selection-entry-conditions" title="Entry Conditions" type="text">Project ready, user clicks on graph node</prop>
        <prop name="node-selection-exit-conditions" title="Exit Conditions" type="text">Node selected, properties panel populated, ready for editing</prop>
        <prop name="node-selection-error-paths" title="Error Paths" type="text">Invalid node ID, selection state corruption, UI render errors</prop>
        <prop name="node-selection-next-states" title="Next Possible States" type="text">property-editing, node-deselection, multiple-selection</prop>
      </props>
    </node>

    <node id="property-editing" title="Property Editing" x="3389.4468298652064" y="141.23009340668492" z="0">
      <description>Handle real-time property value changes with optimistic updates and persistence</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/components/property-editors</file>
      </metadata>
      <props>
        <prop name="property-editing-state-description" title="State Description" type="text">User modifies property values, optimistic UI updates, background persistence</prop>
        <prop name="property-editing-entry-conditions" title="Entry Conditions" type="text">Node selected, user modifies property in sidebar</prop>
        <prop name="property-editing-exit-conditions" title="Exit Conditions" type="text">Property updated locally and persisted, SSE suppression active</prop>
        <prop name="property-editing-error-paths" title="Error Paths" type="text">Persistence failures, validation errors, type conversion issues</prop>
        <prop name="property-editing-next-states" title="Next Possible States" type="text">graph-persistence, optimistic-operations, property-validation</prop>
      </props>
    </node>

    <node id="graph-persistence" title="Graph Persistence" x="3689.4468298652064" y="141.23009340668492" z="0">
      <description>Save graph changes to filesystem and broadcast updates via SSE to connected clients</description>
      <metadata>
        <file>src/app/api/lib/graph-service.ts</file>
        <file>src/app/api/graph-api/route.ts</file>
      </metadata>
      <props>
        <prop name="graph-persistence-state-description" title="State Description" type="text">Converts graph to XML, writes to filesystem, broadcasts to SSE clients</prop>
        <prop name="graph-persistence-entry-conditions" title="Entry Conditions" type="text">Property modified, graph updated in memory</prop>
        <prop name="graph-persistence-exit-conditions" title="Exit Conditions" type="text">Changes persisted to disk, SSE broadcast sent</prop>
        <prop name="graph-persistence-error-paths" title="Error Paths" type="text">File write failures, XML serialization errors, broadcast failures</prop>
        <prop name="graph-persistence-next-states" title="Next Possible States" type="text">sse-broadcast, project-ready, graph-sync-complete</prop>
      </props>
    </node>

    <node id="build-initiation" title="Build Initiation" x="3689.4468298652064" y="635.3119156208899" z="0">
      <description>Start the graph build process by analyzing diffs and invoking the Claude Code agent</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/app/api/agent-request/route.ts</file>
      </metadata>
      <props>
        <prop name="build-initiation-state-description" title="State Description" type="text">User triggers build, diff calculated, agent request initiated</prop>
        <prop name="build-initiation-entry-conditions" title="Entry Conditions" type="text">Project ready, unbuilt nodes exist, user clicks build</prop>
        <prop name="build-initiation-exit-conditions" title="Exit Conditions" type="text">Build request sent, streaming response started, UI shows building state</prop>
        <prop name="build-initiation-error-paths" title="Error Paths" type="text">No current graph, agent API failures, authentication errors</prop>
        <prop name="build-initiation-next-states" title="Next Possible States" type="text">claude-code-execution, build-streaming, build-failure</prop>
      </props>
    </node>

    <node id="claude-code-execution" title="Claude Code Execution" x="4115.883862295563" y="644.3119156208899" z="0">
      <description>Execute Claude Code API with graph context to implement unbuilt nodes</description>
      <metadata>
        <file>src/app/api/claude-code/execute/route.ts</file>
        <file>src/app/api/lib/claude-code-tools.ts</file>
      </metadata>
      <props>
        <prop name="claude-code-execution-state-description" title="State Description" type="text">Claude Code analyzes graph diff and implements code changes</prop>
        <prop name="claude-code-execution-entry-conditions" title="Entry Conditions" type="text">Build initiated, prompt constructed with graph context</prop>
        <prop name="claude-code-execution-exit-conditions" title="Exit Conditions" type="text">Code generation complete, files modified, base graph updated</prop>
        <prop name="claude-code-execution-error-paths" title="Error Paths" type="text">API timeouts, code generation errors, file system conflicts</prop>
        <prop name="claude-code-execution-next-states" title="Next Possible States" type="text">build-streaming, base-graph-update, build-completion</prop>
      </props>
    </node>

    <node id="build-streaming" title="Build Streaming" x="4481.430448854426" y="635.3119156208899" z="0">
      <description>Stream build progress updates to the client with real-time status information</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/app/api/agent-request/route.ts</file>
      </metadata>
      <props>
        <prop name="build-streaming-state-description" title="State Description" type="text">Streaming response with build progress, file changes, status updates</prop>
        <prop name="build-streaming-entry-conditions" title="Entry Conditions" type="text">Claude Code execution started, response stream available</prop>
        <prop name="build-streaming-exit-conditions" title="Exit Conditions" type="text">Build completed or failed, stream ended, final status received</prop>
        <prop name="build-streaming-error-paths" title="Error Paths" type="text">Stream interruption, parsing errors, incomplete responses</prop>
        <prop name="build-streaming-next-states" title="Next Possible States" type="text">build-completion, build-failure, base-graph-update</prop>
      </props>
    </node>

    <node id="base-graph-update" title="Base Graph Update" x="4985.896461019493" y="358.80973959978076" z="0">
      <description>Update the base graph to reflect successfully built nodes and broadcast completion</description>
      <metadata>
        <file>src/app/api/lib/graph-service.ts</file>
        <file>src/lib/store.ts</file>
      </metadata>
      <props>
        <prop name="base-graph-update-state-description" title="State Description" type="text">Current graph becomes new base graph, built states updated, SSE broadcast sent</prop>
        <prop name="base-graph-update-entry-conditions" title="Entry Conditions" type="text">Build successful, code implementation complete</prop>
        <prop name="base-graph-update-exit-conditions" title="Exit Conditions" type="text">Base graph saved, build-complete event broadcasted</prop>
        <prop name="base-graph-update-error-paths" title="Error Paths" type="text">Base graph write failures, broadcast errors, state corruption</prop>
        <prop name="base-graph-update-next-states" title="Next Possible States" type="text">build-completion, sse-broadcast, project-ready</prop>
      </props>
    </node>

    <node id="build-completion" title="Build Completion" x="4141.7300339471785" y="358.80973959978076" z="0">
      <description>Finalize build process by clearing loading states and refreshing graph display</description>
      <metadata>
        <file>src/lib/store.ts</file>
      </metadata>
      <props>
        <prop name="build-completion-state-description" title="State Description" type="text">Build flags cleared, optimistic operations disabled, UI returns to ready state</prop>
        <prop name="build-completion-entry-conditions" title="Entry Conditions" type="text">Build stream completed successfully, base graph updated</prop>
        <prop name="build-completion-exit-conditions" title="Exit Conditions" type="text">All build states cleared, graph refreshed, ready for new interactions</prop>
        <prop name="build-completion-error-paths" title="Error Paths" type="text">State cleanup failures, graph refresh errors</prop>
        <prop name="build-completion-next-states" title="Next Possible States" type="text">project-ready, graph-refresh, success-state</prop>
      </props>
    </node>

    <node id="build-failure" title="Build Failure" x="4271.7300339471785" y="1144.4835622789099" z="0">
      <description>Handle build process failures by setting error states and cleaning up resources</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/app/api/agent-request/route.ts</file>
      </metadata>
      <props>
        <prop name="build-failure-state-description" title="State Description" type="text">Build error detected, error state set, loading flags cleared</prop>
        <prop name="build-failure-entry-conditions" title="Entry Conditions" type="text">Build stream indicates failure, API errors, timeout occurred</prop>
        <prop name="build-failure-exit-conditions" title="Exit Conditions" type="text">Error message displayed, build state reset, ready for retry</prop>
        <prop name="build-failure-error-paths" title="Error Paths" type="text">Error handling failures, state corruption during cleanup</prop>
        <prop name="build-failure-next-states" title="Next Possible States" type="text">error-recovery, project-ready, build-retry</prop>
      </props>
    </node>

    <node id="layer-switching" title="Layer Switching" x="1770" y="-459.8429154362639" z="0">
      <description>Handle layer changes by updating active layer and reloading graphs</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/app/api/layers/route.ts</file>
        <file>src/lib/layers.ts</file>
      </metadata>
      <props>
        <prop name="layer-switching-state-description" title="State Description" type="text">User switches layers, active layer updated, graphs reloaded from new paths</prop>
        <prop name="layer-switching-entry-conditions" title="Entry Conditions" type="text">Project ready, user selects different layer</prop>
        <prop name="layer-switching-exit-conditions" title="Exit Conditions" type="text">Active layer changed, graphs reloaded, SSE notified</prop>
        <prop name="layer-switching-error-paths" title="Error Paths" type="text">Layer doesn&apos;t exist, graph loading failures, path resolution errors</prop>
        <prop name="layer-switching-next-states" title="Next Possible States" type="text">graph-loading, sse-broadcast, project-ready</prop>
      </props>
    </node>

    <node id="sse-broadcast" title="SSE Broadcast" x="3649.4468298652064" y="-412.83861637064877" z="0">
      <description>Broadcast graph updates and events to all connected SSE clients with debouncing</description>
      <metadata>
        <file>src/app/api/lib/graph-service.ts</file>
      </metadata>
      <props>
        <prop name="sse-broadcast-state-description" title="State Description" type="text">Encodes graph as base64 XML, broadcasts to active SSE streams with metadata</prop>
        <prop name="sse-broadcast-entry-conditions" title="Entry Conditions" type="text">Graph persisted, active SSE connections exist</prop>
        <prop name="sse-broadcast-exit-conditions" title="Exit Conditions" type="text">All clients notified, broken connections cleaned up</prop>
        <prop name="sse-broadcast-error-paths" title="Error Paths" type="text">Encoding failures, client disconnections, broadcast timeouts</prop>
        <prop name="sse-broadcast-next-states" title="Next Possible States" type="text">sse-reconciliation, client-update, broadcast-complete</prop>
      </props>
    </node>

    <node id="sse-reconciliation" title="SSE Reconciliation" x="4062.7447123952134" y="-236.291834624106" z="0">
      <description>Reconcile incoming SSE updates with local graph state while preserving UI positions</description>
      <metadata>
        <file>src/lib/store.ts</file>
      </metadata>
      <props>
        <prop name="sse-reconciliation-state-description" title="State Description" type="text">Merges incoming graph with local state, preserves node positions, handles suppressions</prop>
        <prop name="sse-reconciliation-entry-conditions" title="Entry Conditions" type="text">SSE message received, not suppressed by optimistic operations</prop>
        <prop name="sse-reconciliation-exit-conditions" title="Exit Conditions" type="text">Local graph updated with remote changes, UI remains stable</prop>
        <prop name="sse-reconciliation-error-paths" title="Error Paths" type="text">Merge conflicts, position data corruption, parsing errors</prop>
        <prop name="sse-reconciliation-next-states" title="Next Possible States" type="text">graph-display-update, project-ready, sse-connection</prop>
      </props>
    </node>

    <node id="sse-disconnected" title="SSE Disconnected" x="2433.4551239228404" y="523.9070761380823" z="0">
      <description>Handle SSE connection loss and attempt reconnection with exponential backoff</description>
      <metadata>
        <file>src/lib/store.ts</file>
      </metadata>
      <props>
        <prop name="sse-disconnected-state-description" title="State Description" type="text">SSE connection lost, reconnection attempted, offline mode indicators shown</prop>
        <prop name="sse-disconnected-entry-conditions" title="Entry Conditions" type="text">Network failure, server restart, connection timeout</prop>
        <prop name="sse-disconnected-exit-conditions" title="Exit Conditions" type="text">Reconnection successful or permanent failure detected</prop>
        <prop name="sse-disconnected-error-paths" title="Error Paths" type="text">Persistent network issues, server unavailable, authentication expired</prop>
        <prop name="sse-disconnected-next-states" title="Next Possible States" type="text">sse-reconnection, sse-connection, offline-mode</prop>
      </props>
    </node>

    <node id="error-recovery" title="Error Recovery" x="2460" y="2094.4377528723935" z="0">
      <description>Recover from various error states by resetting components and retrying operations</description>
      <metadata>
        <file>src/lib/store.ts</file>
        <file>src/lib/runtimeErrorStore.ts</file>
      </metadata>
      <props>
        <prop name="error-recovery-state-description" title="State Description" type="text">Error detected, recovery strategies applied, state cleanup performed</prop>
        <prop name="error-recovery-entry-conditions" title="Entry Conditions" type="text">Runtime errors, API failures, state corruption detected</prop>
        <prop name="error-recovery-exit-conditions" title="Exit Conditions" type="text">System stabilized, ready for normal operations or graceful degradation</prop>
        <prop name="error-recovery-error-paths" title="Error Paths" type="text">Recovery failures, cascading errors, permanent system failure</prop>
        <prop name="error-recovery-next-states" title="Next Possible States" type="text">project-ready, system-restart, degraded-mode</prop>
      </props>
    </node>
  </nodes>

  <edges>
    <edge id="app-initialization-project-store-initialization" source="app-initialization" target="project-store-initialization" role="links-to"/>
    <edge id="project-store-initialization-project-loading" source="project-store-initialization" target="project-loading" role="links-to"/>
    <edge id="project-loading-graph-loading" source="project-loading" target="graph-loading" role="links-to"/>
    <edge id="graph-loading-template-initialization" source="graph-loading" target="template-initialization" role="404-fallback"/>
    <edge id="template-initialization-graph-loading" source="template-initialization" target="graph-loading" role="retry"/>
    <edge id="graph-loading-graph-validation" source="graph-loading" target="graph-validation" role="success"/>
    <edge id="graph-validation-graph-diff-analysis" source="graph-validation" target="graph-diff-analysis" role="links-to"/>
    <edge id="graph-diff-analysis-sse-connection" source="graph-diff-analysis" target="sse-connection" role="links-to"/>
    <edge id="sse-connection-project-ready" source="sse-connection" target="project-ready" role="success"/>
    <edge id="sse-connection-sse-disconnected" source="sse-connection" target="sse-disconnected" role="error"/>
    <edge id="project-ready-node-selection" source="project-ready" target="node-selection" role="user-action"/>
    <edge id="project-ready-build-initiation" source="project-ready" target="build-initiation" role="user-action"/>
    <edge id="project-ready-layer-switching" source="project-ready" target="layer-switching" role="user-action"/>
    <edge id="node-selection-property-editing" source="node-selection" target="property-editing" role="user-action"/>
    <edge id="property-editing-graph-persistence" source="property-editing" target="graph-persistence" role="links-to"/>
    <edge id="graph-persistence-sse-broadcast" source="graph-persistence" target="sse-broadcast" role="links-to"/>
    <edge id="sse-broadcast-sse-reconciliation" source="sse-broadcast" target="sse-reconciliation" role="links-to"/>
    <edge id="build-initiation-claude-code-execution" source="build-initiation" target="claude-code-execution" role="success"/>
    <edge id="build-initiation-build-failure" source="build-initiation" target="build-failure" role="error"/>
    <edge id="claude-code-execution-build-streaming" source="claude-code-execution" target="build-streaming" role="links-to"/>
    <edge id="build-streaming-base-graph-update" source="build-streaming" target="base-graph-update" role="success"/>
    <edge id="build-streaming-build-failure" source="build-streaming" target="build-failure" role="error"/>
    <edge id="base-graph-update-build-completion" source="base-graph-update" target="build-completion" role="links-to"/>
    <edge id="build-completion-project-ready" source="build-completion" target="project-ready" role="links-to"/>
    <edge id="build-failure-error-recovery" source="build-failure" target="error-recovery" role="links-to"/>
    <edge id="error-recovery-project-ready" source="error-recovery" target="project-ready" role="recovery"/>
    <edge id="layer-switching-graph-loading" source="layer-switching" target="graph-loading" role="reload"/>
    <edge id="sse-disconnected-sse-connection" source="sse-disconnected" target="sse-connection" role="reconnect"/>
    <edge id="sse-reconciliation-project-ready" source="sse-reconciliation" target="project-ready" role="update-complete"/>
    <edge id="node-selection-project-ready" source="node-selection" target="project-ready" role="deselect"/>
    <edge id="graph-validation-error-recovery" source="graph-validation" target="error-recovery" role="validation-error"/>
    <edge id="graph-persistence-error-recovery" source="graph-persistence" target="error-recovery" role="persistence-error"/>
    <edge id="template-initialization-error-recovery" source="template-initialization" target="error-recovery" role="template-error"/>
  </edges>
</graph>
