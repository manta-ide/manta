<?xml version="1.0" encoding="UTF-8"?>
<graph xmlns="urn:app:graph" version="1.0" directed="true">
  <nodes>
    <node id="node-1758954153539333" title="GraphView" x="797.8641013907268" y="377.1609438761203" z="0">
      <description>Main graph visualization component that provides an interactive node-based graph editor. Built using React Flow, it displays nodes representing different components/modules with connections between them. Features include zoom/pan navigation, node selection, drag-and-drop positioning, connection creation, node creation tools, and real-time updates via SSE. Supports both simplified view when zoomed out and detailed view when zoomed in. Integrates with the build system to show visual indicators for built/unbuilt nodes and provides a toolbar for graph manipulation actions.</description>
      <props>
        <prop name="background-color" title="Background Color" type="color">#374151</prop>
        <prop name="grid-spacing" title="Grid Spacing" type="number">20</prop>
        <prop name="min-zoom" title="Minimum Zoom Level" type="slider">0.1</prop>
        <prop name="max-zoom" title="Maximum Zoom Level" type="slider">2</prop>
        <prop name="pan-on-scroll" title="Pan on Trackpad Scroll" type="boolean">true</prop>
        <prop name="zoom-on-pinch" title="Zoom on Pinch Gesture" type="boolean">true</prop>
        <prop name="show-minimap" title="Show Minimap" type="boolean">true</prop>
        <prop name="show-controls" title="Show Controls" type="boolean">true</prop>
        <prop name="auto-fit-view" title="Auto Fit View on Load" type="boolean">true</prop>
        <prop name="connection-mode" title="Connection Mode" type="select">
          <value>Loose</value>
          <options>
          <option>Strict</option>
          <option>Loose</option>
          </options>
        </prop>
      </props>
    </node>

    <node id="node-1758954161768460" title="Canvas" x="210.56638247036784" y="-318.10354448453995" z="0">
      <description>The main React Flow canvas area within GraphView that handles the interactive graph display. Contains all nodes and edges with support for selection, dragging, panning, zooming, and connection creation. Provides the primary workspace for visual graph editing with responsive touch and mouse interactions. Includes background grid pattern and manages viewport transformations for smooth navigation experience.</description>
      <props>
        <prop name="selection-on-drag" title="Enable Selection Rectangle" type="boolean">true</prop>
        <prop name="nodes-draggable" title="Nodes Draggable" type="boolean">true</prop>
        <prop name="nodes-connectable" title="Nodes Connectable" type="boolean">true</prop>
        <prop name="elements-selectable" title="Elements Selectable" type="boolean">true</prop>
        <prop name="pan-activation" title="Pan Mouse Button" type="select">
          <value>Right Click</value>
          <options>
          <option>Left Click</option>
          <option>Right Click</option>
          <option>Middle Click</option>
          </options>
        </prop>
        <prop name="connection-line-style" title="Connection Line Style" type="select">
          <value>Default</value>
          <options>
          <option>Default</option>
          <option>Straight</option>
          <option>Step</option>
          <option>Smoothstep</option>
          </options>
        </prop>
        <prop name="fit-view-padding" title="Fit View Padding" type="slider">0.2</prop>
      </props>
    </node>

    <node id="node-1758954168149644" title="Toolbar" x="104.18899497030526" y="46.58148618933157" z="0">
      <description>Left-side floating toolbar that provides graph editing tools including Select Tool (for node/edge selection and multi-selection), Pan Tool (for viewport navigation), and Add Node Tool (for creating new nodes). Tools are visually highlighted when active and each has specific interaction behaviors. The toolbar is positioned absolutely on the left side of the graph view and uses consistent styling with hover effects.</description>
      <props>
        <prop name="position" title="Toolbar Position" type="select">
          <value>Left Side</value>
          <options>
          <option>Left Side</option>
          <option>Right Side</option>
          <option>Top</option>
          <option>Bottom</option>
          </options>
        </prop>
        <prop name="tool-size" title="Tool Button Size" type="select">
          <value>Small</value>
          <options>
          <option>Small</option>
          <option>Medium</option>
          <option>Large</option>
          </options>
        </prop>
        <prop name="node-1758954168149644-background-color" title="Button Background" type="color">#27272a</prop>
        <prop name="active-color" title="Active Tool Color" type="color">#2563eb</prop>
        <prop name="hover-color" title="Hover Color" type="color">#374151</prop>
        <prop name="show-tooltips" title="Show Tool Tooltips" type="boolean">true</prop>
        <prop name="vertical-spacing" title="Button Spacing" type="number">8</prop>
      </props>
    </node>

    <node id="node-1758954176067240" title="Nodes" x="643.5862516367079" y="-311.4417003435193" z="0">
      <description>Individual graph nodes displayed on the canvas, each representing a component or module. Nodes show title, prompt preview, connection count, and property count. Support two visual modes: simplified view when zoomed out (showing just title and basic stats) and detailed view when zoomed in (showing full information). Include visual state indicators for built/unbuilt status, selection highlighting, and connection handles on all sides for linking to other nodes.</description>
      <props>
        <prop name="node-width" title="Node Width" type="number">260</prop>
        <prop name="node-height" title="Minimum Node Height" type="number">160</prop>
        <prop name="node-1758954176067240-background-color" title="Node Background" type="color">#ffffff</prop>
        <prop name="border-color" title="Border Color" type="color">#e5e7eb</prop>
        <prop name="selected-border-color" title="Selected Border Color" type="color">#2563eb</prop>
        <prop name="title-font-size" title="Title Font Size" type="number">16</prop>
        <prop name="prompt-font-size" title="Prompt Font Size" type="number">13</prop>
        <prop name="show-connection-count" title="Show Connection Count" type="boolean">true</prop>
        <prop name="show-property-count" title="Show Property Count" type="boolean">true</prop>
        <prop name="border-radius" title="Border Radius" type="number">8</prop>
        <prop name="unbuilt-indicator-color" title="Unbuilt Indicator Color" type="color">#ef4444</prop>
      </props>
    </node>

    <node id="node-175895419118378" title="Edges" x="932.2661644142681" y="-314.7726224140297" z="0">
      <description>Connections between nodes displayed as lines with different visual styles based on their status. Built edges appear as solid gray lines, while unbuilt edges show as red dashed lines to indicate they need implementation. Edges support selection highlighting with blue color and increased thickness. Include automatic handle anchor detection based on node positions and support for bidirectional connections.</description>
      <props>
        <prop name="default-stroke-color" title="Default Stroke Color" type="color">#9ca3af</prop>
        <prop name="default-stroke-width" title="Default Stroke Width" type="number">2</prop>
        <prop name="selected-stroke-color" title="Selected Stroke Color" type="color">#3b82f6</prop>
        <prop name="selected-stroke-width" title="Selected Stroke Width" type="number">4</prop>
        <prop name="unbuilt-stroke-color" title="Unbuilt Stroke Color" type="color">#ef4444</prop>
        <prop name="unbuilt-stroke-width" title="Unbuilt Stroke Width" type="number">3</prop>
        <prop name="unbuilt-dash-pattern" title="Unbuilt Dash Pattern" type="text">20,30</prop>
        <prop name="edge-opacity" title="Edge Opacity" type="slider">0.8</prop>
        <prop name="interaction-width" title="Interaction Width" type="number">24</prop>
      </props>
    </node>

    <node id="node-1758954225538597" title="Build Button" x="1414.6962566043094" y="-232.76919189994643" z="0">
      <description>Primary action button located in the top-right corner of the graph view that initiates the build process for the entire graph. When clicked, it analyzes the current graph, identifies unbuilt nodes and edges, and triggers the code generation process through the agent system. Shows loading state with spinner animation when building is in progress and is disabled during build operations to prevent multiple concurrent builds.</description>
      <props>
        <prop name="button-text" title="Button Text" type="text">Build Graph</prop>
        <prop name="loading-text" title="Loading Text" type="text">Building Graph...</prop>
        <prop name="node-1758954225538597-background-color" title="Background Color" type="color">#27272a</prop>
        <prop name="text-color" title="Text Color" type="color">#a1a1aa</prop>
        <prop name="hover-background" title="Hover Background" type="color">#374151</prop>
        <prop name="hover-text-color" title="Hover Text Color" type="color">#d4d4d8</prop>
        <prop name="disabled-opacity" title="Disabled Opacity" type="slider">0.75</prop>
        <prop name="show-icon" title="Show Play Icon" type="boolean">true</prop>
        <prop name="button-size" title="Button Size" type="select">
          <value>Small</value>
          <options>
          <option>Small</option>
          <option>Medium</option>
          <option>Large</option>
          </options>
        </prop>
      </props>
    </node>

    <node id="node-1758954245550132" title="Minimap" x="1417.4720249964014" y="-49.013324343460994" z="0">
      <description>Small overview map component that provides a bird&apos;s-eye view of the entire graph structure. Shows all nodes as colored dots with different colors indicating their build status (gray for built, yellow for unbuilt). Allows quick navigation by clicking to jump to different areas of the graph. Automatically updates as the graph structure changes and provides spatial context when working with large graphs.</description>
      <props>
        <prop name="built-node-color" title="Built Node Color" type="color">#9ca3af</prop>
        <prop name="unbuilt-node-color" title="Unbuilt Node Color" type="color">#fbbf24</prop>
        <prop name="node-1758954245550132-background-color" title="Minimap Background" type="color">#1f2937</prop>
        <prop name="node-1758954245550132-border-color" title="Border Color" type="color">#374151</prop>
        <prop name="viewport-color" title="Viewport Indicator Color" type="color">#3b82f6</prop>
        <prop name="minimap-width" title="Minimap Width" type="number">200</prop>
        <prop name="minimap-height" title="Minimap Height" type="number">150</prop>
        <prop name="node-size" title="Node Dot Size" type="slider">6</prop>
        <prop name="node-1758954245550132-position" title="Position" type="select">
          <value>Bottom Right</value>
          <options>
          <option>Top Left</option>
          <option>Top Right</option>
          <option>Bottom Left</option>
          <option>Bottom Right</option>
          </options>
        </prop>
      </props>
    </node>

    <node id="node-1758954265634860" title="Graph API" x="1360.3043020871112" y="1303.8736881355437" z="0">
      <description>Backend API service that manages graph data persistence and real-time updates. Handles CRUD operations for graph nodes and edges, provides Server-Sent Events (SSE) for live graph synchronization, and manages both current working graph and base built graph storage. Supports XML and JSON formats, graph diffing to identify changes, and coordinates between the frontend graph editor and the build system.</description>
      <props>
        <prop name="sse-enabled" title="Server-Sent Events Enabled" type="boolean">true</prop>
        <prop name="auto-save" title="Auto Save Changes" type="boolean">true</prop>
        <prop name="save-format" title="Default Save Format" type="select">
          <value>XML</value>
          <options>
          <option>XML</option>
          <option>JSON</option>
          </options>
        </prop>
        <prop name="broadcast-changes" title="Broadcast Graph Changes" type="boolean">true</prop>
        <prop name="cache-enabled" title="Enable Session Cache" type="boolean">true</prop>
        <prop name="diff-tracking" title="Track Graph Differences" type="boolean">true</prop>
        <prop name="backup-on-save" title="Create Backup on Save" type="boolean">false</prop>
        <prop name="max-backup-count" title="Maximum Backup Files" type="number">5</prop>
        <prop name="compression-enabled" title="Enable Graph Compression" type="boolean">false</prop>
      </props>
    </node>

    <node id="node-1758954273001847" title="Floating Chat" x="1796.100040457999" y="390.3259244383069" z="0">
      <description>Draggable chat interface component that provides AI-powered assistance for graph editing and development tasks. Features include context-aware messaging with automatic inclusion of selected nodes, files, and code selections. Supports minimization to a small floating button, displays recent message history, and includes markdown rendering with syntax highlighting. Positioned dynamically near the graph view and maintains conversation state throughout the session.</description>
      <props>
        <prop name="chat-width" title="Chat Window Width" type="number">288</prop>
        <prop name="max-height" title="Maximum Height" type="text">60vh</prop>
        <prop name="node-1758954273001847-background-color" title="Background Color" type="color">#18181b</prop>
        <prop name="node-1758954273001847-border-color" title="Border Color" type="color">#52525b</prop>
        <prop name="header-background" title="Header Background" type="color">#27272a</prop>
        <prop name="user-message-bg" title="User Message Background" type="color">#27272a</prop>
        <prop name="ai-message-bg" title="AI Message Background" type="color">#18181b</prop>
        <prop name="auto-include-context" title="Auto Include Context" type="boolean">true</prop>
        <prop name="show-typing-animation" title="Show Typing Animation" type="boolean">true</prop>
        <prop name="minimizable" title="Allow Minimization" type="boolean">true</prop>
        <prop name="message-history-limit" title="Message History Limit" type="number">2</prop>
      </props>
    </node>

    <node id="node-1758954322019295" title="Agent API" x="2023.5255332564998" y="1295.3072698624696" z="0">
      <description>Backend API endpoint that serves as the communication bridge between the frontend chat interface and the Claude Code AI system. Processes user messages with context (selected nodes, files, code selections), forwards requests to the Claude Code execution engine, and streams back AI responses. Handles authentication, request validation, and maintains conversation context for effective AI assistance.</description>
      <props>
        <prop name="streaming-enabled" title="Enable Response Streaming" type="boolean">true</prop>
        <prop name="context-injection" title="Auto Inject Context" type="boolean">true</prop>
        <prop name="max-context-size" title="Maximum Context Size" type="number">50000</prop>
        <prop name="rate-limiting" title="Enable Rate Limiting" type="boolean">true</prop>
        <prop name="max-requests-per-minute" title="Max Requests Per Minute" type="number">30</prop>
        <prop name="timeout-seconds" title="Request Timeout (seconds)" type="number">120</prop>
        <prop name="log-requests" title="Log API Requests" type="boolean">true</prop>
        <prop name="error-retry-count" title="Error Retry Count" type="number">3</prop>
      </props>
    </node>

    <node id="node-1758954340851568" title="Agent Orchestrator" x="1730.6611392987863" y="1954.544534755076" z="0">
      <description>Central coordination service that manages the interaction between the graph editor, chat interface, and code building system. Orchestrates the flow from user requests through context gathering, AI processing, and graph updates. Handles authentication forwarding, request routing to appropriate AI tools, and ensures proper sequencing of operations for graph building and code generation workflows.</description>
      <props>
        <prop name="auto-context-detection" title="Auto Context Detection" type="boolean">true</prop>
        <prop name="request-queuing" title="Enable Request Queuing" type="boolean">true</prop>
        <prop name="max-concurrent-requests" title="Max Concurrent Requests" type="number">3</prop>
        <prop name="operation-timeout" title="Operation Timeout (seconds)" type="number">300</prop>
        <prop name="error-recovery" title="Enable Error Recovery" type="boolean">true</prop>
        <prop name="progress-tracking" title="Track Operation Progress" type="boolean">true</prop>
        <prop name="debug-logging" title="Enable Debug Logging" type="boolean">false</prop>
        <prop name="health-monitoring" title="Enable Health Monitoring" type="boolean">true</prop>
        <prop name="prompt" title="System Prompt" type="text">You are the Manta orchestrator agent. Your role is to analyze the current state, identify what needs to be built, and delegate specific implementation tasks to specialized subagents. You are responsible for coordinating workflows and ensuring proper task delegation.

CRITICAL RULES:
- You are an ORCHESTRATOR - analyze user requests, identify task type, delegate to appropriate subagents, coordinate workflows, and finalize results
- NEVER edit graph structure or code directly - always use subagents
- You CAN use analyze_diff() to understand what needs to be done and verify completion
- All descriptions and summaries must be limited to 1 paragraph maximum

TASK TYPES &amp; WORKFLOWS:

**1) Indexing Flow: Code → Nodes with properties**
- Launch graph-editor subagent in INDEXING mode to analyze existing code and create nodes WITH CMS-style properties
- Graph-editor will automatically sync each node/edge to base graph as they are created (alreadyImplemented=true)
- Do NOT change any code during indexing
- No manual sync_to_base_graph() needed - happens per node/edge

**2) Build Flow: Graph Changes → Code implementation**
- When user launches build after making graph changes (node additions, deletions, edge connections/disconnections, property modifications, etc.), the goal is to UNDERSTAND what the user wants to achieve in the codebase and implement those changes
- Use analyze_diff() to identify what code changes are needed (can specify nodeId for node-specific full analysis)
- Create a set of changes in natural language without any graph/node context - focus on what functionality/behavior the user wants to implement
- Launch code-builder subagent with pure code implementation instructions based on the user&apos;s intended functionality, not just mirroring graph structure
- Launch graph-editor subagent in GRAPH_EDITING mode only if additional graph structure changes are needed during implementation
- IMPORTANT: Delegate code implementation first, then sync the graph only AFTER the code changes are successfully completed
- Use sync_to_base_graph() with specific node/edge IDs once the code-builder agent reports completion of the implementation
- The graph changes are a DESIGN TOOL - the actual implementation happens in code via the code-builder agent, followed by graph synchronization

**3) Direct Build/Fix Flow: Quick code fixes**
- Create a set of changes in natural language without any graph/node context
- Launch code-builder subagent directly for quick fixes or small changes
- No code building required

**4) Direct Graph Editing Flow: Edit graph structure**
- Launch graph-editor subagent in GRAPH_EDITING mode to create/edit/delete nodes
- Graph-editor will NOT sync to base graph (working graph only)
- No code building required

GRAPH EDITOR MODES:
- **INDEXING mode**: Creates nodes WITH CMS-style properties, uses alreadyImplemented=true for automatic per-node/edge syncing to base
- **GRAPH_EDITING mode**: Creates nodes WITHOUT properties, no automatic syncing to base

VERIFICATION PROCESS:
- Run analyze_diff() before starting work to see initial state
- Run analyze_diff() after sync_to_base_graph() to confirm all differences are resolved
- Only consider task complete when analyze_diff() shows no remaining differences

ORCHESTRATOR RESPONSIBILITIES:
- Analyze diff between current and base graphs to identify work needed
- Specify the correct mode (INDEXING or GRAPH_EDITING) when launching graph-editor subagent
- Delegate to appropriate subagents: indexing → graph-editor INDEXING mode, building → code-builder + graph-editor GRAPH_EDITING mode as needed
- Coordinate workflow and ensure tasks complete successfully
- Use sync_to_base_graph() with specific node/edge IDs only for build flows (not indexing)
- Provide high-level guidance and summarize results (1 paragraph maximum)
- NEVER do property wiring - handled by graph-editor</prop>
        <prop name="max-turns" title="Max Turns" type="number">50</prop>
        <prop name="max-thinking-tokens" title="Max Thinking Tokens" type="number">10000</prop>
        <prop name="model" title="Model" type="select">
          <value>claude-3-5-sonnet-20241022</value>
          <options>
          <option>claude-3-5-sonnet-20241022</option>
          <option>claude-3-5-haiku-20241022</option>
          </options>
        </prop>
        <prop name="fallback-model" title="Fallback Model" type="select">
          <value>claude-3-5-haiku-20241022</value>
          <options>
          <option>claude-3-5-sonnet-20241022</option>
          <option>claude-3-5-haiku-20241022</option>
          </options>
        </prop>
      </props>
    </node>

    <node id="node-175895435015761" title="Graph Editor" x="1929.0096409675564" y="2216.538025086601" z="0">
      <description>AI agent specialized in graph structure manipulation and node management. Handles creation, modification, and deletion of graph nodes and edges through natural language commands. Integrates with the graph tools to perform structural changes, maintains graph consistency, and provides intelligent suggestions for graph organization. Works with the Code Builder to ensure graph changes align with implementation requirements.</description>
      <props>
        <prop name="auto-layout" title="Enable Auto Layout" type="boolean">true</prop>
        <prop name="layout-algorithm" title="Layout Algorithm" type="select">
          <value>Layered</value>
          <options>
          <option>Layered</option>
          <option>Force</option>
          <option>Tree</option>
          <option>Grid</option>
          </options>
        </prop>
        <prop name="node-spacing" title="Node Spacing" type="number">80</prop>
        <prop name="layer-spacing" title="Layer Spacing" type="number">100</prop>
        <prop name="validation-enabled" title="Enable Graph Validation" type="boolean">true</prop>
        <prop name="auto-connection-inference" title="Auto Infer Connections" type="boolean">true</prop>
        <prop name="duplicate-detection" title="Detect Duplicate Nodes" type="boolean">true</prop>
        <prop name="consistency-checking" title="Enable Consistency Checking" type="boolean">true</prop>
        <prop name="node-175895435015761-prompt" title="Agent Prompt" type="text">---
name: graph-editor
description: Graph structure editor with code analysis for web development projects. Use when users want to create, edit, delete, or modify the structure of graph nodes and edges, including properties. Can analyze existing code to create appropriate nodes and properties. Supports both indexing (with properties) and pure graph editing modes.
tools: mcp__graph-tools__read, mcp__graph-tools__node_create, mcp__graph-tools__node_edit, mcp__graph-tools__node_delete, mcp__graph-tools__edge_create, mcp__graph-tools__edge_delete, Read, Glob, Grep
---

You are a graph editor agent.

## Core Rules
- Use unique IDs for all nodes
- Never edit source code - graph changes only
- Delete template nodes if request requires different structure
- The orchestrator will specify whether you are in INDEXING or GRAPH_EDITING mode
- During INDEXING mode: Analyze existing code directly to identify components and create appropriate nodes WITH CMS-style properties. Use alreadyImplemented=true when creating nodes/edges to sync them immediately to base graph.
- During GRAPH_EDITING mode: Create nodes WITHOUT properties (graph structure only). Do NOT use alreadyImplemented=true.
- You can edit property values for existing nodes when specifically instructed
- Add properties as needed for indexing and build flows, but NOT for direct graph editing
- Use clear, descriptive titles and prompts for nodes.
- Keep all node descriptions concise and focused - maximum 1 paragraph per node
- Keep prompts concise and focused on essential functionality - no verbose explanations or feature lists

## Code Analysis for Indexing
- Use Read, Glob, and Grep tools to analyze existing code files
- Identify components, utilities, and other code structures
- Determine what aspects of each component can be made customizable
- Focus on CMS-style properties: content, colors, layout, simple settings
- Avoid technical properties: event handlers, state props, CSS objects, callbacks
- Do 1 node per visible component unless asked another way. So no nodes for utils, type definitions, libraries, etc., only for large individual visible components. In case of backend - same, large components.
- Do not index .manta, .claude, .git, package.json and other configurations and settings, only real, tangible components.
- Make sure that all properties have default values that are same as the default values for them in code. Never create empty properties.
- The property values should be the same as the default values for them in code, so there shouldn&apos;t be any example or imagined properties that are not based on the code or feature. 
  You should not invent what is implemented, as the state of the code and features should match the state of the graph. So the properties you create should have default values that match the implementation in code. 
  
## Tool Usage
Tools: read(graphType=&quot;current&quot;), node_create, node_edit, node_delete, edge_create, edge_delete, Read, Glob, Grep

**IMPORTANT:** Always use read(graphType=&quot;current&quot;) to work with the current graph structure.

**Keep responses brief and use tools efficiently:**
- For read-only queries (&quot;what nodes are on the graph?&quot;), call read(graphType=&quot;current&quot;) once and answer succinctly
- For deletions, call node_delete once per target node and avoid repeated attempts
- Avoid unnecessary thinking or extra tool calls when a single call is sufficient

Property Guidelines:
- Properties should correspond to real component attributes for CMS-style customization
- Make sure that all properties have values in the nodes
- Use appropriate input types from the schema that make sense for the component&apos;s customization needs:
  * &apos;text&apos; - for strings like titles, descriptions, labels
  * &apos;number&apos; - for numeric values like sizes, padding, font sizes, quantities
  * &apos;color&apos; - for color pickers, values in form of #ffffff
  * &apos;boolean&apos; - for true/false values like disabled, visible, required, clickable
  * &apos;select&apos; - for predefined options like size scales, layout directions, font families
  * &apos;checkbox&apos; - for multiple selections like features or categories
  * &apos;radio&apos; - for single selections from mutually exclusive options
  * &apos;slider&apos; - for ranged numeric values like opacity, border radius, spacing
  * &apos;font&apos; - for font selection with family, size, weight options
  * &apos;object&apos; - for nested properties and grouped settings
  * &apos;object-list&apos; - for arrays of objects like social links, menu items, testimonials
- Each property should have a clear &apos;title&apos; and appropriate &apos;type&apos; from the schema
So every property should have some meaning to why the user would change this.
- Focus on user-editable CMS properties:
  * Colors and styling options
  * Size and spacing settings
  * Visibility and behavior
  * Text content and labels
  * Layout and positioning
- IMPORTANT: Always use the correct property type - NEVER use &quot;text&quot; type for color properties, always use &quot;color&quot; type, etc.
- Group related properties using &apos;object&apos; type for better organization (e.g., &quot;styling&quot; with color, text color, font settings)
- Use &apos;object-list&apos; for repeatable content structures with defined itemFields
- Make sure that all properties are readable by a normal user without programming/css knowledge.
All of the property titles and options for them should be in natural text. Not bottom-right - Bottom Right, not flex-col, Flexible Column.
The properties will be read by a smart AI agent for implementation, so they shouldn&apos;t be directly compatible with code. If you think that the property is directly tied to CSS, just do some alias for it so it could be understood during build, for example container &quot;flex-flex-col items-center&quot; should be &quot;Flexible Centered Container&quot;.
-There should be no compound properties that require to maintain strcture inside text block, if any structure is needed - utilize the objects or list properties.</prop>
      </props>
    </node>

    <node id="node-1758954356335768" title="Code Builder" x="1583.1751695691016" y="2216.538025086601" z="0">
      <description>AI agent responsible for translating graph nodes into actual code implementation. Analyzes node specifications, properties, and connections to generate appropriate code files and components. Handles both incremental updates for modified nodes and full graph builds. Integrates with the file system to create, update, and organize generated code while maintaining proper dependencies and architectural patterns.</description>
      <props>
        <prop name="target-framework" title="Target Framework" type="select">
          <value>React</value>
          <options>
          <option>React</option>
          <option>Vue</option>
          <option>Angular</option>
          <option>Svelte</option>
          <option>Next.js</option>
          </options>
        </prop>
        <prop name="typescript-enabled" title="Generate TypeScript" type="boolean">true</prop>
        <prop name="styling-approach" title="Styling Approach" type="select">
          <value>Tailwind CSS</value>
          <options>
          <option>Tailwind CSS</option>
          <option>CSS Modules</option>
          <option>Styled Components</option>
          <option>SCSS</option>
          <option>Plain CSS</option>
          </options>
        </prop>
        <prop name="component-structure" title="Component Structure" type="select">
          <value>Functional</value>
          <options>
          <option>Functional</option>
          <option>Class</option>
          <option>Mixed</option>
          </options>
        </prop>
        <prop name="auto-imports" title="Generate Auto Imports" type="boolean">true</prop>
        <prop name="code-formatting" title="Enable Code Formatting" type="boolean">true</prop>
        <prop name="dependency-management" title="Manage Dependencies" type="boolean">true</prop>
        <prop name="build-validation" title="Validate Generated Code" type="boolean">true</prop>
        <prop name="backup-before-build" title="Backup Before Build" type="boolean">true</prop>
        <prop name="node-1758954356335768-prompt" title="Agent Prompt" type="text">---
name: code-builder
description: Code builder agent specialized for web development projects. Use for implementing specific graph nodes assigned by the orchestrator. Focuses on generating code based on node specifications. Works on one node at a time as directed.
tools: mcp__graph-tools__read, Read, Write, Edit, Bash, MultiEdit, NotebookEdit, Glob, Grep, WebFetch, TodoWrite, ExitPlanMode, BashOutput, KillShell
---

You are the Manta code builder agent specialized for development projects.

TASK EXECUTION:
1. Receive specific node implementation task from orchestrator
2. Read the node details using read(graphType=&quot;current&quot;, nodeId)
3. Implement the code for the node based on its title and prompt
4. Report completion when the specific node is fully implemented

Rules:
- Work on ONE SPECIFIC NODE at a time as assigned by the orchestrator
- Focus on the assigned node: implement code based on the node&apos;s title and prompt
- Report completion when the assigned node code implementation is ready
- Do NOT worry about properties or property wiring - that&apos;s handled by the graph structure
- Use modern web development conventions and patterns

Available Tools:
- read(graphType, nodeId?) - Read from current or base graph, or specific nodes
- Use Read, Write, Edit, Bash and other file manipulation tools for code implementation

Output: Short, single-sentence status updates during work. End with concise summary of what was accomplished.

Focus on code implementation based on node specifications. Always run linting on the file after code creation or edits are done.</prop>
      </props>
    </node>
  </nodes>

  <edges>
    <edge id="node-1758954176067240-node-1758954153539333" source="node-1758954176067240" target="node-1758954153539333" role="links-to"/>
    <edge id="node-175895419118378-node-1758954153539333" source="node-175895419118378" target="node-1758954153539333" role="links-to"/>
    <edge id="node-1758954168149644-node-1758954153539333" source="node-1758954168149644" target="node-1758954153539333" role="links-to"/>
    <edge id="node-1758954161768460-node-1758954153539333" source="node-1758954161768460" target="node-1758954153539333" role="links-to"/>
    <edge id="node-1758954225538597-node-1758954153539333" source="node-1758954225538597" target="node-1758954153539333" role="links-to"/>
    <edge id="node-1758954153539333-node-1758954245550132" source="node-1758954153539333" target="node-1758954245550132" role="links-to"/>
    <edge id="node-1758954153539333-node-1758954265634860" source="node-1758954153539333" target="node-1758954265634860" role="links-to"/>
    <edge id="node-1758954273001847-node-1758954322019295" source="node-1758954273001847" target="node-1758954322019295" role="links-to"/>
    <edge id="node-1758954340851568-node-175895435015761" source="node-1758954340851568" target="node-175895435015761" role="links-to"/>
    <edge id="node-1758954340851568-node-1758954356335768" source="node-1758954340851568" target="node-1758954356335768" role="links-to"/>
    <edge id="node-1758954265634860-node-1758954340851568" source="node-1758954265634860" target="node-1758954340851568" role="links-to"/>
    <edge id="node-1758954322019295-node-1758954340851568" source="node-1758954322019295" target="node-1758954340851568" role="links-to"/>
  </edges>
</graph>
