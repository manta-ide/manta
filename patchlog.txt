import Link from "next/link";
import { getVar } from "@/lib/vars";

export default function Page() {
  const rootStyle = {
    "--font-family": getVar("font-family", "Poppins"),
    "--primary-color": getVar("primary-color", "#06b6d4"),
    "--secondary-color": getVar("secondary-color", "#a78bfa"),
    "--accent-color": getVar("accent-color", "#f59e0b"),
    "--background-color": getVar("background-color", "#0b1022"),
    "--text-color": getVar("text-color", "#e5e7eb"),
    "--container-max-width": `${getVar("container-max-width", 1200)}px`,
    "--page-padding-x": `${getVar("page-padding-x", 24)}px`,
    "--section-spacing": `${getVar("section-spacing", 96)}px`,
    "--background-gradient-enabled": getVar("background-gradient-enabled", true) ? "1" : "0",
    "--background-gradient-from": getVar("background-gradient-from", "#0b1022"),
    "--background-gradient-to": getVar("background-gradient-to", "#111827"),
    "--background-gradient-angle": `${getVar("background-gradient-angle", 45)}deg`,
  } as React.CSSProperties;

  const navLinks = (getVar("nav-links", "Product,Pricing,Docs,Blog,Changelog") || "").split(",").map((s: string) => s.trim()).filter(Boolean);
  const trustLogos = (getVar("trust-logos", "/vercel.svg,/next.svg,/globe.svg") || "").split(",").map((s: string) => s.trim()).filter(Boolean);

  const features = [
    {
      icon: getVar("card-1-icon", "/globe.svg"),
      title: getVar("card-1-title", "Graph-based editor"),
      desc: getVar("card-1-desc", "Compose systems visually with a fast, snap-to-grid graph and powerful node tooling."),
      href: getVar("card-1-link-href", "/product/graph-editor"),
      linkText: getVar("card-1-link-text", "Explore graphs →"),
    },
    {
      icon: getVar("card-2-icon", "/globe.svg"),
      title: getVar("card-2-title", "Integrated AI chat"),
      desc: getVar("card-2-desc", "Ask for refactors, generate nodes, or document flows—right inside the canvas."),
      href: getVar("card-2-link-href", "/product/ai-chat"),
      linkText: getVar("card-2-link-text", "Chat with Manta →"),
    },
    {
      icon: getVar("card-3-icon", "/globe.svg"),
      title: getVar("card-3-title", "Figma-level precision"),
      desc: getVar("card-3-desc", "Pixel-perfect controls, constraints, and versioned design tokens for production."),
      href: getVar("card-3-link-href", "/product/editor"),
      linkText: getVar("card-3-link-text", "See the editor →"),
    },
  ];

  const showcaseTabs = [
    getVar("tab-1-label", "Graph"),
    getVar("tab-2-label", "Chat"),
    getVar("tab-3-label", "Code"),
  ];

  // normalize values to avoid TS literal comparison issues
  const heroAlignment = String(getVar("hero-alignment", "center"));
  const navbarTransparency = Number(getVar("navbar-transparency", 70)) || 70;

  return (
    <main
      id="landing-page"
      style={rootStyle}
      className={`min-h-screen bg-[var(--background-color)] text-[var(--text-color)] antialiased selection:bg-[var(--accent-color)]/30 selection:text-white`}>

      {/* subtle animated gradient */}
      {getVar("background-gradient-enabled", true) ? (
        <div aria-hidden="true" className="pointer-events-none absolute inset-0 -z-10 overflow-hidden">
          <div
            className="absolute inset-0 blur-3xl opacity-30"
            style={{
              backgroundImage: `linear-gradient(var(--background-gradient-angle), var(--background-gradient-from), var(--background-gradient-to))`,
              transform: "rotate(0.01deg)",
            }}
          />
        </div>
      ) : null}

      {/* Header / Navbar */}
      <header
        id="hero-nav"
        className="sticky top-0 z-40 backdrop-blur-md"
        style={{ backgroundColor: `rgba(6,9,20,${navbarTransparency / 100})`, height: `${getVar("navbar-height", 64)}px` }}>
        <div className="mx-auto flex h-full w-full max-w-[var(--container-max-width)] items-center justify-between px-[var(--page-padding-x)]">
          <div className="flex items-center gap-3">
            <img src={getVar("logo-src", "/globe.svg")} alt={getVar("brand-name", "Manta")} className="h-8 w-8" />
            <span className="font-medium tracking-tight" style={{ fontFamily: `var(--font-family)` }}>{getVar("brand-name", "Manta")}</span>
          </div>

          <nav className="hidden items-center gap-6 md:flex">
            {navLinks.map((label: string) => (
              <Link key={label} href={`#${label.toLowerCase()}`} className="text-sm text-[var(--text-color)]/80 hover:text-white">
                {label}
              </Link>
            ))}
          </nav>

          <div className="hidden items-center gap-[var(--cta-gap)] md:flex">
            <Link href={getVar("cta-secondary-link", "/demo")} className={`rounded-md px-3 py-2 text-sm ring-1 ring-white/8 text-[var(--text-color)]/90 hover:bg-white/4`}>{getVar("cta-secondary-text", "Live demo")}</Link>
            <Link href={getVar("cta-primary-link", "/signup")} className={`rounded-md bg-[var(--primary-color)] px-4 py-2 text-sm font-semibold text-black`}>{getVar("cta-primary-text", "Start building")}</Link>
          </div>

          {/* mobile menu placeholder */}
          <div className="md:hidden" aria-hidden>
            <button className="rounded-md bg-white/3 p-2" />
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section
        id="hero"
        className="relative px-[var(--page-padding-x)]"
        style={{ paddingTop: `${getVar("hero-padding-y", 80)}px`, paddingBottom: `${getVar("hero-padding-y", 80)}px` }}>
        <div className="mx-auto flex w-full max-w-[var(--container-max-width)] flex-col items-center gap-8 md:flex-row md:items-start">
          <div className={`w-full md:w-1/2 ${heroAlignment === "left" ? "md:items-start" : heroAlignment === "right" ? "md:items-end" : "md:items-center"}`}>
            {getVar("show-announcement-badge", true) ? (
              <Link href={getVar("badge-link", "/beta")} className="mb-4 inline-flex items-center rounded-full bg-white/6 px-3 py-1 text-sm text-[var(--accent-color)]">
                {getVar("badge-text", "New: Private beta open")}
              </Link>
            ) : null}

            <h1 className="text-center text-4xl font-extrabold leading-tight tracking-tight text-white md:text-left md:text-5xl" style={{ fontFamily: `var(--font-family)` }}>{getVar("headline", "Design, code, and orchestrate with Manta")}</h1>

            <p className="mt-4 max-w-2xl text-center text-lg text-[var(--text-color)]/80 md:text-left">
              {getVar("subheadline", "A graphical IDE that fuses a graph-based editor, AI chat, and Figma-level controls—so teams ship complex systems faster.")}
            </p>

            <div className="mt-6 flex flex-col items-center gap-3 md:flex-row md:items-center">
              <Link href={getVar("cta-primary-link", "/signup")} className="inline-flex items-center justify-center rounded-lg bg-[var(--primary-color)] px-5 py-3 text-sm font-semibold text-black shadow-md md:mr-3">{getVar("cta-primary-text", "Start building")}</Link>
              <Link href={getVar("cta-secondary-link", "/demo")} className="inline-flex items-center justify-center rounded-lg border border-white/6 px-4 py-3 text-sm text-[var(--text-color)]/90">{getVar("cta-secondary-text", "Live demo")}</Link>
            </div>

            {getVar("show-trust-logos", true) ? (
              <div className="mt-8 flex items-center gap-6 opacity-80">
                {trustLogos.map((src: string, i: number) => (
                  <img key={i} src={src} alt={`partner-${i}`} className="h-6 w-auto grayscale opacity-80" />
                ))}
              </div>
            ) : null}
          </div>

          <div className="order-first w-full md:order-last md:w-1/2">
            <div className="mx-auto w-full max-w-[700px] rounded-2xl bg-gradient-to-br from-white/3 to-black/5 p-3 shadow-xl md:p-6" role="img" aria-label={getVar("hero-image-alt", "Screenshot of Manta’s graph-based editor") }>
              <img src={getVar("hero-image-src", "https://placehold.co/1024x640/orange/black?text=Manta+Graph+Editor&font=roboto")} alt={getVar("hero-image-alt", "Screenshot of Manta’s graph-based editor")} className="w-full rounded-xl" />
            </div>
          </div>
        </div>
      </section>

      {/* Features */}
      <section
        id="features"
        className="px-[var(--page-padding-x)]"
        style={{
          paddingTop: `${getVar("section-padding-y", 72)}px`,
          paddingBottom: `${getVar("section-padding-y", 72)}px`,
          // dynamic CSS custom properties driven by the graph
          ...( { } as React.CSSProperties ),
          // injected vars
          ["--card-corner-radius"]: `${getVar("card-corner-radius", 16)}px`,
          ["--card-border-rgba"]: `rgba(255,255,255,${(Number(getVar("card-border-opacity", 24)) || 24) / 100})`,
          ["--grid-gap"]: `${getVar("grid-gap", 20)}px`,
          ["--use-card-gradients"]: getVar("use-card-gradients", true) ? "1" : "0",
          ["--card-gradient-angle"]: `${getVar("card-gradient-angle", 45)}deg`,
          ["--card-1-gradient-from"]: getVar("card-1-gradient-from", "#06b6d4"),
          ["--card-1-gradient-to"]: getVar("card-1-gradient-to", "#3b82f6"),
          ["--card-2-gradient-from"]: getVar("card-2-gradient-from", "#fa8cf5"),
          ["--card-2-gradient-to"]: getVar("card-2-gradient-to", "#8b5cf6"),
          ["--card-3-gradient-from"]: getVar("card-3-gradient-from", "#10b981"),
          ["--card-3-gradient-to"]: getVar("card-3-gradient-to", "#06b6d4"),
          ["--card-text-color"]: getVar("card-text-color", "#f8f3f3"),
          ["--link-color"]: getVar("link-color", "#ffffff"),
          ["--link-hover-color"]: getVar("link-hover-color", "#f59e0b"),
          ["--card-1-icon-tint"]: getVar("card-1-icon-tint", "#ffffff"),
          ["--card-2-icon-tint"]: getVar("card-2-icon-tint", "#ffffff"),
          ["--card-3-icon-tint"]: getVar("card-3-icon-tint", "#ffffff"),
          ["--card-hover-elevation"]: getVar("card-hover-elevation", "lg"),
        } as React.CSSProperties}
      >
        <div className="mx-auto w-full max-w-[var(--container-max-width)]">
          <div className="mx-auto max-w-2xl text-center">
            <p className="text-sm font-medium uppercase text-[var(--secondary-color)]">{getVar("section-eyebrow", "Why Manta")}</p>
            <h2 className="mt-3 text-3xl font-semibold text-white">{getVar("section-heading", "One canvas. Three superpowers.")}</h2>
            <p className="mt-4 text-base text-[var(--text-color)]/80">{getVar("section-kicker", "Everything you need to design, orchestrate, and ship complex systems—without leaving the canvas.")}</p>
          </div>

          <div className={`mt-10 grid grid-cols-1 gap-[var(--grid-gap)] sm:grid-cols-2 lg:grid-cols-3`}> 
            {features.map((f, idx) => {
              const i = idx + 1;
              const gradientBg = `linear-gradient(var(--card-gradient-angle), var(--card-${i}-gradient-from), var(--card-${i}-gradient-to)` + ")";
              const useGrad = getVar("use-card-gradients", true);
              const hoverElevation = String(getVar("card-hover-elevation", "lg"));
              const hoverClass = hoverElevation === "sm" ? "hover:shadow-md" : hoverElevation === "md" ? "hover:shadow-lg" : "hover:shadow-2xl";

              return (
                <article
                  key={idx}
                  className={`group rounded-[var(--card-corner-radius)] border p-6 transition-transform duration-300 ${hoverClass} hover:-translate-y-1`} 
                  style={{
                    borderColor: "var(--card-border-rgba)",
                    background: useGrad ? gradientBg : "rgba(255,255,255,0.02)",
                    color: "var(--card-text-color)",
                    borderRadius: "var(--card-corner-radius)",
                  } as React.CSSProperties}
                >
                  <div className="flex items-start gap-4">
                    <div className={`flex h-10 w-10 items-center justify-center flex-none rounded-md`} style={{ background: `linear-gradient(135deg, var(--card-${i}-gradient-from), var(--card-${i}-gradient-to))` }}>
                      <img src={f.icon} alt="" className="h-6 w-6" style={{ filter: "brightness(0) invert(1)", opacity: 0.95 }} />
                    </div>

                    <div>
                      <h3 className="text-lg font-semibold" style={{ color: "var(--card-text-color)" }}>{f.title}</h3>
                      <p className="mt-2 text-sm" style={{ color: "var(--card-text-color)" }}>{f.desc}</p>
                      <Link href={f.href} className="mt-4 inline-block text-sm font-medium transition-colors" style={{ color: "var(--link-color)" }}>
                        <span className="hover:text-[var(--link-hover-color)]">{f.linkText}</span>
                      </Link>
                    </div>
                  </div>
                </article>
              );
            })}
          </div>
        </div>
      </section>

      {/* Editor Showcase */}
      <section id="editor-showcase" className="px-[var(--page-padding-x)]" style={{ paddingTop: `${getVar("section-padding-y", 84)}px`, paddingBottom: `${getVar("section-padding-y", 84)}px` }}>
        <div className="mx-auto w-full max-w-[var(--container-max-width)]">
          <div className="mx-auto max-w-3xl text-center">
            <h3 className="text-lg font-medium text-[var(--secondary-color)]">{getVar("showcase-heading", "Meet the canvas")}</h3>
            <p className="mt-3 text-2xl font-semibold text-white">{getVar("showcase-desc", "A unified workspace where diagrams, code, and conversations stay in sync.")}</p>
            <div className="mt-6 flex items-center justify-center gap-4">
              <Link href={getVar("action-1-href", "/video")} className="text-sm font-medium text-[var(--primary-color)]">{getVar("action-1-text", "Watch video")}</Link>
              <Link href={getVar("action-2-href", "/docs")} className="text-sm font-medium text-[var(--text-color)]/90">{getVar("action-2-text", "View docs")}</Link>
            </div>
          </div>

          <div className="mt-8 flex justify-center">
            <div className="w-full max-w-[1100px] rounded-[var(--frame-corner-radius)] border bg-[var(--background-color)] p-4" style={{ borderColor: `rgba(255,255,255,${(Number(getVar("frame-border-opacity", 14)) || 14) / 100})` }}>
              <div className="flex items-center gap-4 border-b border-white/6 pb-3">
                {showcaseTabs.map((t, i) => (
                  <div key={i} className={`rounded-md px-3 py-1 text-sm ${i === 0 ? "bg-white/6 text-white" : "text-[var(--text-color)]/70"}`}>{t}</div>
                ))}
              </div>

              <div className="mt-4 relative overflow-hidden rounded-md bg-gradient-to-b from-white/2 to-black/5">
                {getVar("overlay-grid", true) ? (
                  <svg className="absolute inset-0 h-full w-full opacity-10" viewBox="0 0 800 450" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg" aria-hidden>
                    <defs>
                      <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                        <path d="M 40 0 L 0 0 0 40" fill="none" stroke="currentColor" strokeWidth="0.5" strokeOpacity="0.12" />
                      </pattern>
                    </defs>
                    <rect width="100%" height="100%" fill="url(#grid)" fillOpacity="0.06" />
                  </svg>
                ) : null}

                <img src={getVar("canvas-image-src", "https://placehold.co/1280x720/111827/e5e7eb?text=Manta+Canvas&font=roboto")} alt={getVar("canvas-image-alt", "Manta editor canvas with nodes and connections")} className="relative w-full rounded-md" />

                {/* subtle node-link hints */}
                <svg className="pointer-events-none absolute inset-0 h-full w-full opacity-30" viewBox="0 0 1200 600" xmlns="http://www.w3.org/2000/svg" aria-hidden>
                  <g stroke={getVar("primary-color", "#06b6d4")} strokeWidth="2" strokeOpacity="0.08" fill="none">
                    <path d="M120 480 C 220 420, 320 300, 420 260" />
                    <circle cx="120" cy="480" r="6" fill={getVar("accent-color", "#f59e0b")} />
                    <circle cx="420" cy="260" r="5" fill={getVar("secondary-color", "#a78bfa")} />
                  </g>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer id="footer" className="px-[var(--page-padding-x)]" style={{ paddingTop: `${getVar("section-padding-y", 64)}px`, paddingBottom: `${getVar("section-padding-y", 64)}px` }}>
        <div className="mx-auto w-full max-w-[var(--container-max-width)]">
          <div className="flex flex-col gap-8 md:flex-row md:justify-between">
            <div className="max-w-sm">
              <div className="flex items-center gap-3">
                <img src={getVar("logo-src", "/globe.svg")} alt={getVar("brand-name", "Manta")} className="h-8 w-8" />
                <div>
                  <div className="font-medium text-white">{getVar("brand-name", "Manta")}</div>
                  <div className="text-sm text-[var(--text-color)]/80">{getVar("brand-tagline", "Design, code, and orchestrate on one canvas.")}</div>
                </div>
              </div>

              {getVar("newsletter-enabled", true) ? (
                <form action="#" method="POST" className="mt-6 flex w-full max-w-md flex-col gap-3">
                  <label htmlFor="email" className="sr-only">{getVar("newsletter-heading", "Get product updates")}</label>
                  <input id="email" name="email" type="email" placeholder={getVar("newsletter-placeholder", "you@company.com")} required className="rounded-md bg-white/3 px-3 py-2 text-[var(--text-color)] placeholder:text-[var(--text-color)]/50" />
                  <div className="flex gap-2">
                    <button type="submit" className="rounded-md bg-[var(--primary-color)] px-4 py-2 text-sm font-semibold text-black">{getVar("newsletter-button-text", "Subscribe")}</button>
                    <div className="text-sm text-[var(--text-color)]/70">{getVar("copyright", "© 2025 Manta Labs, Inc.")}</div>
                  </div>
                </form>
              ) : null}
            </div>

            <div className="grid grid-cols-2 gap-[var(--column-gap)] md:grid-cols-4">
              {/** Utility to parse columns from properties **/}
              <nav aria-label="footer-product">
                <h4 className="mb-3 text-sm font-semibold text-white">Product</h4>
                <ul className="flex flex-col gap-2 text-sm text-[var(--text-color)]/80">
                  {(getVar("product-links", "") || "").split(",").map((l: string, i: number) => {
                    const [label, href] = l.split(":");
                    return label ? (<li key={i}><Link href={href ? href.trim() : "#"} className="hover:underline">{label.trim()}</Link></li>) : null;
                  })}
                </ul>
              </nav>

              <nav aria-label="footer-company">
                <h4 className="mb-3 text-sm font-semibold text-white">Company</h4>
                <ul className="flex flex-col gap-2 text-sm text-[var(--text-color)]/80">
                  {(getVar("company-links",